
Console_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002db0  08002db0  00012db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dd0  08002dd0  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002dd0  08002dd0  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dd0  08002dd0  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dd0  08002dd0  00012dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dd4  08002dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000030  08002e08  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002e08  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076cd  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1b  00000000  00000000  00027726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  00029348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  00029ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017627  00000000  00000000  0002a180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000922d  00000000  00000000  000417a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000817f5  00000000  00000000  0004a9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc1c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c18  00000000  00000000  000cc21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d98 	.word	0x08002d98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002d98 	.word	0x08002d98

0800014c <init_ILI9341>:

extern SPI_HandleTypeDef hspi1;

/* ----------ILI9341 INTERFACE ------------*/

int init_ILI9341(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); //CS Low
 8000150:	2200      	movs	r2, #0
 8000152:	2108      	movs	r1, #8
 8000154:	480b      	ldr	r0, [pc, #44]	; (8000184 <init_ILI9341+0x38>)
 8000156:	f001 fd0c 	bl	8001b72 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //DC Low -> Command
 800015a:	2200      	movs	r2, #0
 800015c:	2104      	movs	r1, #4
 800015e:	4809      	ldr	r0, [pc, #36]	; (8000184 <init_ILI9341+0x38>)
 8000160:	f001 fd07 	bl	8001b72 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)CMD_SOFTRST, 1, HAL_MAX_DELAY); // Sends Soft Reset to the Screen Driver
 8000164:	f04f 33ff 	mov.w	r3, #4294967295
 8000168:	2201      	movs	r2, #1
 800016a:	2101      	movs	r1, #1
 800016c:	4806      	ldr	r0, [pc, #24]	; (8000188 <init_ILI9341+0x3c>)
 800016e:	f002 f99d 	bl	80024ac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); //CS High
 8000172:	2201      	movs	r2, #1
 8000174:	2108      	movs	r1, #8
 8000176:	4803      	ldr	r0, [pc, #12]	; (8000184 <init_ILI9341+0x38>)
 8000178:	f001 fcfb 	bl	8001b72 <HAL_GPIO_WritePin>

	return 1; //Successful return
 800017c:	2301      	movs	r3, #1
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40010800 	.word	0x40010800
 8000188:	20000054 	.word	0x20000054

0800018c <columnAddressSet>:

int columnAddressSet(uint8_t start_col, uint8_t end_col){
 800018c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000190:	b087      	sub	sp, #28
 8000192:	af00      	add	r7, sp, #0
 8000194:	4603      	mov	r3, r0
 8000196:	460a      	mov	r2, r1
 8000198:	71fb      	strb	r3, [r7, #7]
 800019a:	4613      	mov	r3, r2
 800019c:	71bb      	strb	r3, [r7, #6]
 800019e:	466b      	mov	r3, sp
 80001a0:	461e      	mov	r6, r3
	size_t buf_len = 4;
 80001a2:	2304      	movs	r3, #4
 80001a4:	617b      	str	r3, [r7, #20]
	uint8_t buffer[buf_len];
 80001a6:	6979      	ldr	r1, [r7, #20]
 80001a8:	460b      	mov	r3, r1
 80001aa:	3b01      	subs	r3, #1
 80001ac:	613b      	str	r3, [r7, #16]
 80001ae:	2300      	movs	r3, #0
 80001b0:	4688      	mov	r8, r1
 80001b2:	4699      	mov	r9, r3
 80001b4:	f04f 0200 	mov.w	r2, #0
 80001b8:	f04f 0300 	mov.w	r3, #0
 80001bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80001c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80001c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80001c8:	2300      	movs	r3, #0
 80001ca:	460c      	mov	r4, r1
 80001cc:	461d      	mov	r5, r3
 80001ce:	f04f 0200 	mov.w	r2, #0
 80001d2:	f04f 0300 	mov.w	r3, #0
 80001d6:	00eb      	lsls	r3, r5, #3
 80001d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80001dc:	00e2      	lsls	r2, r4, #3
 80001de:	1dcb      	adds	r3, r1, #7
 80001e0:	08db      	lsrs	r3, r3, #3
 80001e2:	00db      	lsls	r3, r3, #3
 80001e4:	ebad 0d03 	sub.w	sp, sp, r3
 80001e8:	466b      	mov	r3, sp
 80001ea:	3300      	adds	r3, #0
 80001ec:	60fb      	str	r3, [r7, #12]

	buffer[0] = (start_col >> 8) & 0xFF; // High byte of start column
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	2200      	movs	r2, #0
 80001f2:	701a      	strb	r2, [r3, #0]
	buffer[1] = start_col & 0xFF; // Low byte of start column
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	79fa      	ldrb	r2, [r7, #7]
 80001f8:	705a      	strb	r2, [r3, #1]
	buffer[2] = (end_col >> 8) & 0xFF; // High byte of end column
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	2200      	movs	r2, #0
 80001fe:	709a      	strb	r2, [r3, #2]
	buffer[3] = end_col & 0xFF; // Low byte of end column
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	79ba      	ldrb	r2, [r7, #6]
 8000204:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); //CS Low
 8000206:	2200      	movs	r2, #0
 8000208:	2108      	movs	r1, #8
 800020a:	4814      	ldr	r0, [pc, #80]	; (800025c <columnAddressSet+0xd0>)
 800020c:	f001 fcb1 	bl	8001b72 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //DC Low -> Command
 8000210:	2200      	movs	r2, #0
 8000212:	2104      	movs	r1, #4
 8000214:	4811      	ldr	r0, [pc, #68]	; (800025c <columnAddressSet+0xd0>)
 8000216:	f001 fcac 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)CMD_COLADDRSET, 1, HAL_MAX_DELAY);
 800021a:	f04f 33ff 	mov.w	r3, #4294967295
 800021e:	2201      	movs	r2, #1
 8000220:	212a      	movs	r1, #42	; 0x2a
 8000222:	480f      	ldr	r0, [pc, #60]	; (8000260 <columnAddressSet+0xd4>)
 8000224:	f002 f942 	bl	80024ac <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // DC High -> Data
 8000228:	2201      	movs	r2, #1
 800022a:	2104      	movs	r1, #4
 800022c:	480b      	ldr	r0, [pc, #44]	; (800025c <columnAddressSet+0xd0>)
 800022e:	f001 fca0 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, buf_len, HAL_MAX_DELAY); //sets column address
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	b29a      	uxth	r2, r3
 8000236:	f04f 33ff 	mov.w	r3, #4294967295
 800023a:	68f9      	ldr	r1, [r7, #12]
 800023c:	4808      	ldr	r0, [pc, #32]	; (8000260 <columnAddressSet+0xd4>)
 800023e:	f002 f935 	bl	80024ac <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); //CS High
 8000242:	2201      	movs	r2, #1
 8000244:	2108      	movs	r1, #8
 8000246:	4805      	ldr	r0, [pc, #20]	; (800025c <columnAddressSet+0xd0>)
 8000248:	f001 fc93 	bl	8001b72 <HAL_GPIO_WritePin>

	return 1; //Successful return
 800024c:	2301      	movs	r3, #1
 800024e:	46b5      	mov	sp, r6
}
 8000250:	4618      	mov	r0, r3
 8000252:	371c      	adds	r7, #28
 8000254:	46bd      	mov	sp, r7
 8000256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800025a:	bf00      	nop
 800025c:	40010800 	.word	0x40010800
 8000260:	20000054 	.word	0x20000054

08000264 <pageAddressSet>:

int pageAddressSet(uint8_t start_pag, uint8_t end_pag){
 8000264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000268:	b087      	sub	sp, #28
 800026a:	af00      	add	r7, sp, #0
 800026c:	4603      	mov	r3, r0
 800026e:	460a      	mov	r2, r1
 8000270:	71fb      	strb	r3, [r7, #7]
 8000272:	4613      	mov	r3, r2
 8000274:	71bb      	strb	r3, [r7, #6]
 8000276:	466b      	mov	r3, sp
 8000278:	461e      	mov	r6, r3
	size_t buf_len = 4;
 800027a:	2304      	movs	r3, #4
 800027c:	617b      	str	r3, [r7, #20]
	uint8_t buffer[buf_len];
 800027e:	6979      	ldr	r1, [r7, #20]
 8000280:	460b      	mov	r3, r1
 8000282:	3b01      	subs	r3, #1
 8000284:	613b      	str	r3, [r7, #16]
 8000286:	2300      	movs	r3, #0
 8000288:	4688      	mov	r8, r1
 800028a:	4699      	mov	r9, r3
 800028c:	f04f 0200 	mov.w	r2, #0
 8000290:	f04f 0300 	mov.w	r3, #0
 8000294:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000298:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800029c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80002a0:	2300      	movs	r3, #0
 80002a2:	460c      	mov	r4, r1
 80002a4:	461d      	mov	r5, r3
 80002a6:	f04f 0200 	mov.w	r2, #0
 80002aa:	f04f 0300 	mov.w	r3, #0
 80002ae:	00eb      	lsls	r3, r5, #3
 80002b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80002b4:	00e2      	lsls	r2, r4, #3
 80002b6:	1dcb      	adds	r3, r1, #7
 80002b8:	08db      	lsrs	r3, r3, #3
 80002ba:	00db      	lsls	r3, r3, #3
 80002bc:	ebad 0d03 	sub.w	sp, sp, r3
 80002c0:	466b      	mov	r3, sp
 80002c2:	3300      	adds	r3, #0
 80002c4:	60fb      	str	r3, [r7, #12]

	buffer[0] = (start_pag >> 8) & 0xFF; // High byte of start column
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	2200      	movs	r2, #0
 80002ca:	701a      	strb	r2, [r3, #0]
	buffer[1] = start_pag & 0xFF; // Low byte of start column
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	705a      	strb	r2, [r3, #1]
	buffer[2] = (end_pag >> 8) & 0xFF; // High byte of end column
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	2200      	movs	r2, #0
 80002d6:	709a      	strb	r2, [r3, #2]
	buffer[3] = end_pag & 0xFF; // Low byte of end column
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); //CS Low
 80002de:	2200      	movs	r2, #0
 80002e0:	2108      	movs	r1, #8
 80002e2:	4814      	ldr	r0, [pc, #80]	; (8000334 <pageAddressSet+0xd0>)
 80002e4:	f001 fc45 	bl	8001b72 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //DC Low -> Command
 80002e8:	2200      	movs	r2, #0
 80002ea:	2104      	movs	r1, #4
 80002ec:	4811      	ldr	r0, [pc, #68]	; (8000334 <pageAddressSet+0xd0>)
 80002ee:	f001 fc40 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)CMD_PAGADDRSET, 1, HAL_MAX_DELAY);
 80002f2:	f04f 33ff 	mov.w	r3, #4294967295
 80002f6:	2201      	movs	r2, #1
 80002f8:	212b      	movs	r1, #43	; 0x2b
 80002fa:	480f      	ldr	r0, [pc, #60]	; (8000338 <pageAddressSet+0xd4>)
 80002fc:	f002 f8d6 	bl	80024ac <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // DC High -> Data
 8000300:	2201      	movs	r2, #1
 8000302:	2104      	movs	r1, #4
 8000304:	480b      	ldr	r0, [pc, #44]	; (8000334 <pageAddressSet+0xd0>)
 8000306:	f001 fc34 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, buf_len, HAL_MAX_DELAY); //sets page address
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	b29a      	uxth	r2, r3
 800030e:	f04f 33ff 	mov.w	r3, #4294967295
 8000312:	68f9      	ldr	r1, [r7, #12]
 8000314:	4808      	ldr	r0, [pc, #32]	; (8000338 <pageAddressSet+0xd4>)
 8000316:	f002 f8c9 	bl	80024ac <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); //CS High
 800031a:	2201      	movs	r2, #1
 800031c:	2108      	movs	r1, #8
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <pageAddressSet+0xd0>)
 8000320:	f001 fc27 	bl	8001b72 <HAL_GPIO_WritePin>

	return 1; //Successful return
 8000324:	2301      	movs	r3, #1
 8000326:	46b5      	mov	sp, r6
}
 8000328:	4618      	mov	r0, r3
 800032a:	371c      	adds	r7, #28
 800032c:	46bd      	mov	sp, r7
 800032e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000332:	bf00      	nop
 8000334:	40010800 	.word	0x40010800
 8000338:	20000054 	.word	0x20000054

0800033c <writeMemoryContinue>:

int writeMemoryContinue(uint8_t clr,  uint8_t start_col, uint8_t end_col, uint8_t start_pag, uint8_t end_pag){
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	4604      	mov	r4, r0
 8000344:	4608      	mov	r0, r1
 8000346:	4611      	mov	r1, r2
 8000348:	461a      	mov	r2, r3
 800034a:	4623      	mov	r3, r4
 800034c:	71fb      	strb	r3, [r7, #7]
 800034e:	4603      	mov	r3, r0
 8000350:	71bb      	strb	r3, [r7, #6]
 8000352:	460b      	mov	r3, r1
 8000354:	717b      	strb	r3, [r7, #5]
 8000356:	4613      	mov	r3, r2
 8000358:	713b      	strb	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); //CS Low
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	481c      	ldr	r0, [pc, #112]	; (80003d0 <writeMemoryContinue+0x94>)
 8000360:	f001 fc07 	bl	8001b72 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //DC Low -> Command
 8000364:	2200      	movs	r2, #0
 8000366:	2104      	movs	r1, #4
 8000368:	4819      	ldr	r0, [pc, #100]	; (80003d0 <writeMemoryContinue+0x94>)
 800036a:	f001 fc02 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)CMD_MEMWRCON, 1, HAL_MAX_DELAY);
 800036e:	f04f 33ff 	mov.w	r3, #4294967295
 8000372:	2201      	movs	r2, #1
 8000374:	213c      	movs	r1, #60	; 0x3c
 8000376:	4817      	ldr	r0, [pc, #92]	; (80003d4 <writeMemoryContinue+0x98>)
 8000378:	f002 f898 	bl	80024ac <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // DC High -> Data
 800037c:	2201      	movs	r2, #1
 800037e:	2104      	movs	r1, #4
 8000380:	4813      	ldr	r0, [pc, #76]	; (80003d0 <writeMemoryContinue+0x94>)
 8000382:	f001 fbf6 	bl	8001b72 <HAL_GPIO_WritePin>
	for (int i=0; i<(start_pag-end_pag+1)*(start_col-end_col+1);i++){
 8000386:	2300      	movs	r3, #0
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	e009      	b.n	80003a0 <writeMemoryContinue+0x64>
		HAL_SPI_Transmit(&hspi1, &clr, 1, HAL_MAX_DELAY); //sets page address
 800038c:	1df9      	adds	r1, r7, #7
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
 8000392:	2201      	movs	r2, #1
 8000394:	480f      	ldr	r0, [pc, #60]	; (80003d4 <writeMemoryContinue+0x98>)
 8000396:	f002 f889 	bl	80024ac <HAL_SPI_Transmit>
	for (int i=0; i<(start_pag-end_pag+1)*(start_col-end_col+1);i++){
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	3301      	adds	r3, #1
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	793a      	ldrb	r2, [r7, #4]
 80003a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80003a6:	1ad3      	subs	r3, r2, r3
 80003a8:	3301      	adds	r3, #1
 80003aa:	79b9      	ldrb	r1, [r7, #6]
 80003ac:	797a      	ldrb	r2, [r7, #5]
 80003ae:	1a8a      	subs	r2, r1, r2
 80003b0:	3201      	adds	r2, #1
 80003b2:	fb02 f303 	mul.w	r3, r2, r3
 80003b6:	68fa      	ldr	r2, [r7, #12]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	dbe7      	blt.n	800038c <writeMemoryContinue+0x50>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); //CS High
 80003bc:	2201      	movs	r2, #1
 80003be:	2108      	movs	r1, #8
 80003c0:	4803      	ldr	r0, [pc, #12]	; (80003d0 <writeMemoryContinue+0x94>)
 80003c2:	f001 fbd6 	bl	8001b72 <HAL_GPIO_WritePin>

	return 1; //Successful return
 80003c6:	2301      	movs	r3, #1
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd90      	pop	{r4, r7, pc}
 80003d0:	40010800 	.word	0x40010800
 80003d4:	20000054 	.word	0x20000054

080003d8 <displayInversionON>:

int displayInversionON(){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); //CS Low
 80003dc:	2200      	movs	r2, #0
 80003de:	2108      	movs	r1, #8
 80003e0:	480b      	ldr	r0, [pc, #44]	; (8000410 <displayInversionON+0x38>)
 80003e2:	f001 fbc6 	bl	8001b72 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //DC Low -> Command
 80003e6:	2200      	movs	r2, #0
 80003e8:	2104      	movs	r1, #4
 80003ea:	4809      	ldr	r0, [pc, #36]	; (8000410 <displayInversionON+0x38>)
 80003ec:	f001 fbc1 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)CMD_DSPINVON, 1, HAL_MAX_DELAY);
 80003f0:	f04f 33ff 	mov.w	r3, #4294967295
 80003f4:	2201      	movs	r2, #1
 80003f6:	2121      	movs	r1, #33	; 0x21
 80003f8:	4806      	ldr	r0, [pc, #24]	; (8000414 <displayInversionON+0x3c>)
 80003fa:	f002 f857 	bl	80024ac <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); //CS High
 80003fe:	2201      	movs	r2, #1
 8000400:	2108      	movs	r1, #8
 8000402:	4803      	ldr	r0, [pc, #12]	; (8000410 <displayInversionON+0x38>)
 8000404:	f001 fbb5 	bl	8001b72 <HAL_GPIO_WritePin>

	return 1; //Successful return
 8000408:	2301      	movs	r3, #1
}
 800040a:	4618      	mov	r0, r3
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40010800 	.word	0x40010800
 8000414:	20000054 	.word	0x20000054

08000418 <displayInversionOFF>:

int displayInversionOFF(){
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); //CS Low
 800041c:	2200      	movs	r2, #0
 800041e:	2108      	movs	r1, #8
 8000420:	480b      	ldr	r0, [pc, #44]	; (8000450 <displayInversionOFF+0x38>)
 8000422:	f001 fba6 	bl	8001b72 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //DC Low -> Command
 8000426:	2200      	movs	r2, #0
 8000428:	2104      	movs	r1, #4
 800042a:	4809      	ldr	r0, [pc, #36]	; (8000450 <displayInversionOFF+0x38>)
 800042c:	f001 fba1 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)CMD_DSPINVOFF, 1, HAL_MAX_DELAY);
 8000430:	f04f 33ff 	mov.w	r3, #4294967295
 8000434:	2201      	movs	r2, #1
 8000436:	2120      	movs	r1, #32
 8000438:	4806      	ldr	r0, [pc, #24]	; (8000454 <displayInversionOFF+0x3c>)
 800043a:	f002 f837 	bl	80024ac <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); //CS High
 800043e:	2201      	movs	r2, #1
 8000440:	2108      	movs	r1, #8
 8000442:	4803      	ldr	r0, [pc, #12]	; (8000450 <displayInversionOFF+0x38>)
 8000444:	f001 fb95 	bl	8001b72 <HAL_GPIO_WritePin>

	return 1; //Successful return
 8000448:	2301      	movs	r3, #1
}
 800044a:	4618      	mov	r0, r3
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40010800 	.word	0x40010800
 8000454:	20000054 	.word	0x20000054

08000458 <ClearScreen>:

int ClearScreen(uint8_t start_col, uint8_t end_col, uint8_t start_pag, uint8_t end_pag){
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b085      	sub	sp, #20
 800045c:	af02      	add	r7, sp, #8
 800045e:	4604      	mov	r4, r0
 8000460:	4608      	mov	r0, r1
 8000462:	4611      	mov	r1, r2
 8000464:	461a      	mov	r2, r3
 8000466:	4623      	mov	r3, r4
 8000468:	71fb      	strb	r3, [r7, #7]
 800046a:	4603      	mov	r3, r0
 800046c:	71bb      	strb	r3, [r7, #6]
 800046e:	460b      	mov	r3, r1
 8000470:	717b      	strb	r3, [r7, #5]
 8000472:	4613      	mov	r3, r2
 8000474:	713b      	strb	r3, [r7, #4]
	columnAddressSet((uint8_t)0,(uint8_t)320);
 8000476:	2140      	movs	r1, #64	; 0x40
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff fe87 	bl	800018c <columnAddressSet>
	pageAddressSet(0, 240);
 800047e:	21f0      	movs	r1, #240	; 0xf0
 8000480:	2000      	movs	r0, #0
 8000482:	f7ff feef 	bl	8000264 <pageAddressSet>
	writeMemoryContinue(red_color,(uint8_t) 0,(uint8_t) 320,(uint8_t) 0,(uint8_t) 240);
 8000486:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <ClearScreen+0x64>)
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	b2d8      	uxtb	r0, r3
 800048c:	23f0      	movs	r3, #240	; 0xf0
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	2300      	movs	r3, #0
 8000492:	2240      	movs	r2, #64	; 0x40
 8000494:	2100      	movs	r1, #0
 8000496:	f7ff ff51 	bl	800033c <writeMemoryContinue>
	columnAddressSet(start_col, end_col);
 800049a:	79ba      	ldrb	r2, [r7, #6]
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	4611      	mov	r1, r2
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff fe73 	bl	800018c <columnAddressSet>
	pageAddressSet(start_pag, end_pag);
 80004a6:	793a      	ldrb	r2, [r7, #4]
 80004a8:	797b      	ldrb	r3, [r7, #5]
 80004aa:	4611      	mov	r1, r2
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff fed9 	bl	8000264 <pageAddressSet>

	return 1;
 80004b2:	2301      	movs	r3, #1
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd90      	pop	{r4, r7, pc}
 80004bc:	20000000 	.word	0x20000000

080004c0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2110      	movs	r1, #16
 80004c8:	4803      	ldr	r0, [pc, #12]	; (80004d8 <SELECT+0x18>)
 80004ca:	f001 fb52 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004ce:	2001      	movs	r0, #1
 80004d0:	f001 f882 	bl	80015d8 <HAL_Delay>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40010800 	.word	0x40010800

080004dc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2110      	movs	r1, #16
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <DESELECT+0x18>)
 80004e6:	f001 fb44 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004ea:	2001      	movs	r0, #1
 80004ec:	f001 f874 	bl	80015d8 <HAL_Delay>
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40010800 	.word	0x40010800

080004f8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000502:	bf00      	nop
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <SPI_TxByte+0x30>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	f003 0302 	and.w	r3, r3, #2
 800050e:	2b02      	cmp	r3, #2
 8000510:	d1f8      	bne.n	8000504 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000512:	1df9      	adds	r1, r7, #7
 8000514:	2364      	movs	r3, #100	; 0x64
 8000516:	2201      	movs	r2, #1
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <SPI_TxByte+0x30>)
 800051a:	f001 ffc7 	bl	80024ac <HAL_SPI_Transmit>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000054 	.word	0x20000054

0800052c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000538:	bf00      	nop
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <SPI_TxBuffer+0x30>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	f003 0302 	and.w	r3, r3, #2
 8000544:	2b02      	cmp	r3, #2
 8000546:	d1f8      	bne.n	800053a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000548:	887a      	ldrh	r2, [r7, #2]
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	6879      	ldr	r1, [r7, #4]
 800054e:	4803      	ldr	r0, [pc, #12]	; (800055c <SPI_TxBuffer+0x30>)
 8000550:	f001 ffac 	bl	80024ac <HAL_SPI_Transmit>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000054 	.word	0x20000054

08000560 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000566:	23ff      	movs	r3, #255	; 0xff
 8000568:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800056a:	bf00      	nop
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <SPI_RxByte+0x34>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	2b02      	cmp	r3, #2
 8000578:	d1f8      	bne.n	800056c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800057a:	1dba      	adds	r2, r7, #6
 800057c:	1df9      	adds	r1, r7, #7
 800057e:	2364      	movs	r3, #100	; 0x64
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2301      	movs	r3, #1
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <SPI_RxByte+0x34>)
 8000586:	f002 f8cd 	bl	8002724 <HAL_SPI_TransmitReceive>

	return data;
 800058a:	79bb      	ldrb	r3, [r7, #6]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000054 	.word	0x20000054

08000598 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005a0:	f7ff ffde 	bl	8000560 <SPI_RxByte>
 80005a4:	4603      	mov	r3, r0
 80005a6:	461a      	mov	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	701a      	strb	r2, [r3, #0]
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <SD_ReadyWait+0x30>)
 80005bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005c0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005c2:	f7ff ffcd 	bl	8000560 <SPI_RxByte>
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2bff      	cmp	r3, #255	; 0xff
 80005ce:	d003      	beq.n	80005d8 <SD_ReadyWait+0x24>
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <SD_ReadyWait+0x30>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1f4      	bne.n	80005c2 <SD_ReadyWait+0xe>

	return res;
 80005d8:	79fb      	ldrb	r3, [r7, #7]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000004e 	.word	0x2000004e

080005e8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80005ee:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80005f2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80005f4:	f7ff ff72 	bl	80004dc <DESELECT>
	for(int i = 0; i < 10; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	e005      	b.n	800060a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80005fe:	20ff      	movs	r0, #255	; 0xff
 8000600:	f7ff ff7a 	bl	80004f8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	3301      	adds	r3, #1
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	2b09      	cmp	r3, #9
 800060e:	ddf6      	ble.n	80005fe <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000610:	f7ff ff56 	bl	80004c0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000614:	2340      	movs	r3, #64	; 0x40
 8000616:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000628:	2395      	movs	r3, #149	; 0x95
 800062a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800062c:	463b      	mov	r3, r7
 800062e:	2106      	movs	r1, #6
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff7b 	bl	800052c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000636:	e002      	b.n	800063e <SD_PowerOn+0x56>
	{
		cnt--;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3b01      	subs	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800063e:	f7ff ff8f 	bl	8000560 <SPI_RxByte>
 8000642:	4603      	mov	r3, r0
 8000644:	2b01      	cmp	r3, #1
 8000646:	d002      	beq.n	800064e <SD_PowerOn+0x66>
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f4      	bne.n	8000638 <SD_PowerOn+0x50>
	}

	DESELECT();
 800064e:	f7ff ff45 	bl	80004dc <DESELECT>
	SPI_TxByte(0XFF);
 8000652:	20ff      	movs	r0, #255	; 0xff
 8000654:	f7ff ff50 	bl	80004f8 <SPI_TxByte>

	PowerFlag = 1;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <SD_PowerOn+0x80>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000051 	.word	0x20000051

0800066c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <SD_PowerOff+0x14>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000051 	.word	0x20000051

08000684 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000688:	4b02      	ldr	r3, [pc, #8]	; (8000694 <SD_CheckPower+0x10>)
 800068a:	781b      	ldrb	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	20000051 	.word	0x20000051

08000698 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <SD_RxDataBlock+0x58>)
 80006a4:	22c8      	movs	r2, #200	; 0xc8
 80006a6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006a8:	f7ff ff5a 	bl	8000560 <SPI_RxByte>
 80006ac:	4603      	mov	r3, r0
 80006ae:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	2bff      	cmp	r3, #255	; 0xff
 80006b4:	d103      	bne.n	80006be <SD_RxDataBlock+0x26>
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <SD_RxDataBlock+0x58>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1f4      	bne.n	80006a8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	2bfe      	cmp	r3, #254	; 0xfe
 80006c2:	d001      	beq.n	80006c8 <SD_RxDataBlock+0x30>
 80006c4:	2300      	movs	r3, #0
 80006c6:	e00f      	b.n	80006e8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	607a      	str	r2, [r7, #4]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff62 	bl	8000598 <SPI_RxBytePtr>
	} while(len--);
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	1e5a      	subs	r2, r3, #1
 80006d8:	603a      	str	r2, [r7, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1f4      	bne.n	80006c8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80006de:	f7ff ff3f 	bl	8000560 <SPI_RxByte>
	SPI_RxByte();
 80006e2:	f7ff ff3d 	bl	8000560 <SPI_RxByte>

	return TRUE;
 80006e6:	2301      	movs	r3, #1
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000004c 	.word	0x2000004c

080006f4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000704:	f7ff ff56 	bl	80005b4 <SD_ReadyWait>
 8000708:	4603      	mov	r3, r0
 800070a:	2bff      	cmp	r3, #255	; 0xff
 800070c:	d001      	beq.n	8000712 <SD_TxDataBlock+0x1e>
 800070e:	2300      	movs	r3, #0
 8000710:	e02f      	b.n	8000772 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000712:	78fb      	ldrb	r3, [r7, #3]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff feef 	bl	80004f8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800071a:	78fb      	ldrb	r3, [r7, #3]
 800071c:	2bfd      	cmp	r3, #253	; 0xfd
 800071e:	d020      	beq.n	8000762 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000720:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ff01 	bl	800052c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800072a:	f7ff ff19 	bl	8000560 <SPI_RxByte>
		SPI_RxByte();
 800072e:	f7ff ff17 	bl	8000560 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000732:	e00b      	b.n	800074c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000734:	f7ff ff14 	bl	8000560 <SPI_RxByte>
 8000738:	4603      	mov	r3, r0
 800073a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	f003 031f 	and.w	r3, r3, #31
 8000742:	2b05      	cmp	r3, #5
 8000744:	d006      	beq.n	8000754 <SD_TxDataBlock+0x60>
			i++;
 8000746:	7bbb      	ldrb	r3, [r7, #14]
 8000748:	3301      	adds	r3, #1
 800074a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800074c:	7bbb      	ldrb	r3, [r7, #14]
 800074e:	2b40      	cmp	r3, #64	; 0x40
 8000750:	d9f0      	bls.n	8000734 <SD_TxDataBlock+0x40>
 8000752:	e000      	b.n	8000756 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000754:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000756:	bf00      	nop
 8000758:	f7ff ff02 	bl	8000560 <SPI_RxByte>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0fa      	beq.n	8000758 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	f003 031f 	and.w	r3, r3, #31
 8000768:	2b05      	cmp	r3, #5
 800076a:	d101      	bne.n	8000770 <SD_TxDataBlock+0x7c>
 800076c:	2301      	movs	r3, #1
 800076e:	e000      	b.n	8000772 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	6039      	str	r1, [r7, #0]
 8000784:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000786:	f7ff ff15 	bl	80005b4 <SD_ReadyWait>
 800078a:	4603      	mov	r3, r0
 800078c:	2bff      	cmp	r3, #255	; 0xff
 800078e:	d001      	beq.n	8000794 <SD_SendCmd+0x1a>
 8000790:	23ff      	movs	r3, #255	; 0xff
 8000792:	e042      	b.n	800081a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff feae 	bl	80004f8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	0e1b      	lsrs	r3, r3, #24
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fea8 	bl	80004f8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	0c1b      	lsrs	r3, r3, #16
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fea2 	bl	80004f8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	0a1b      	lsrs	r3, r3, #8
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fe9c 	bl	80004f8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fe97 	bl	80004f8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b40      	cmp	r3, #64	; 0x40
 80007ce:	d102      	bne.n	80007d6 <SD_SendCmd+0x5c>
 80007d0:	2395      	movs	r3, #149	; 0x95
 80007d2:	73fb      	strb	r3, [r7, #15]
 80007d4:	e007      	b.n	80007e6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b48      	cmp	r3, #72	; 0x48
 80007da:	d102      	bne.n	80007e2 <SD_SendCmd+0x68>
 80007dc:	2387      	movs	r3, #135	; 0x87
 80007de:	73fb      	strb	r3, [r7, #15]
 80007e0:	e001      	b.n	80007e6 <SD_SendCmd+0x6c>
	else crc = 1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fe85 	bl	80004f8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b4c      	cmp	r3, #76	; 0x4c
 80007f2:	d101      	bne.n	80007f8 <SD_SendCmd+0x7e>
 80007f4:	f7ff feb4 	bl	8000560 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80007f8:	230a      	movs	r3, #10
 80007fa:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80007fc:	f7ff feb0 	bl	8000560 <SPI_RxByte>
 8000800:	4603      	mov	r3, r0
 8000802:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000804:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000808:	2b00      	cmp	r3, #0
 800080a:	da05      	bge.n	8000818 <SD_SendCmd+0x9e>
 800080c:	7bbb      	ldrb	r3, [r7, #14]
 800080e:	3b01      	subs	r3, #1
 8000810:	73bb      	strb	r3, [r7, #14]
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d1f1      	bne.n	80007fc <SD_SendCmd+0x82>

	return res;
 8000818:	7b7b      	ldrb	r3, [r7, #13]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SD_disk_initialize+0x14>
 8000834:	2301      	movs	r3, #1
 8000836:	e0d1      	b.n	80009dc <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000838:	4b6a      	ldr	r3, [pc, #424]	; (80009e4 <SD_disk_initialize+0x1c0>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	2b00      	cmp	r3, #0
 8000844:	d003      	beq.n	800084e <SD_disk_initialize+0x2a>
 8000846:	4b67      	ldr	r3, [pc, #412]	; (80009e4 <SD_disk_initialize+0x1c0>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	e0c6      	b.n	80009dc <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800084e:	f7ff fecb 	bl	80005e8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000852:	f7ff fe35 	bl	80004c0 <SELECT>

	/* check disk type */
	type = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800085a:	2100      	movs	r1, #0
 800085c:	2040      	movs	r0, #64	; 0x40
 800085e:	f7ff ff8c 	bl	800077a <SD_SendCmd>
 8000862:	4603      	mov	r3, r0
 8000864:	2b01      	cmp	r3, #1
 8000866:	f040 80a1 	bne.w	80009ac <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800086a:	4b5f      	ldr	r3, [pc, #380]	; (80009e8 <SD_disk_initialize+0x1c4>)
 800086c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000870:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000872:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000876:	2048      	movs	r0, #72	; 0x48
 8000878:	f7ff ff7f 	bl	800077a <SD_SendCmd>
 800087c:	4603      	mov	r3, r0
 800087e:	2b01      	cmp	r3, #1
 8000880:	d155      	bne.n	800092e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000882:	2300      	movs	r3, #0
 8000884:	73fb      	strb	r3, [r7, #15]
 8000886:	e00c      	b.n	80008a2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000888:	7bfc      	ldrb	r4, [r7, #15]
 800088a:	f7ff fe69 	bl	8000560 <SPI_RxByte>
 800088e:	4603      	mov	r3, r0
 8000890:	461a      	mov	r2, r3
 8000892:	f104 0310 	add.w	r3, r4, #16
 8000896:	443b      	add	r3, r7
 8000898:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	3301      	adds	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d9ef      	bls.n	8000888 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008a8:	7abb      	ldrb	r3, [r7, #10]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d17e      	bne.n	80009ac <SD_disk_initialize+0x188>
 80008ae:	7afb      	ldrb	r3, [r7, #11]
 80008b0:	2baa      	cmp	r3, #170	; 0xaa
 80008b2:	d17b      	bne.n	80009ac <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008b4:	2100      	movs	r1, #0
 80008b6:	2077      	movs	r0, #119	; 0x77
 80008b8:	f7ff ff5f 	bl	800077a <SD_SendCmd>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d807      	bhi.n	80008d2 <SD_disk_initialize+0xae>
 80008c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008c6:	2069      	movs	r0, #105	; 0x69
 80008c8:	f7ff ff57 	bl	800077a <SD_SendCmd>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d004      	beq.n	80008dc <SD_disk_initialize+0xb8>
				} while (Timer1);
 80008d2:	4b45      	ldr	r3, [pc, #276]	; (80009e8 <SD_disk_initialize+0x1c4>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1ec      	bne.n	80008b4 <SD_disk_initialize+0x90>
 80008da:	e000      	b.n	80008de <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008dc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80008de:	4b42      	ldr	r3, [pc, #264]	; (80009e8 <SD_disk_initialize+0x1c4>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d062      	beq.n	80009ac <SD_disk_initialize+0x188>
 80008e6:	2100      	movs	r1, #0
 80008e8:	207a      	movs	r0, #122	; 0x7a
 80008ea:	f7ff ff46 	bl	800077a <SD_SendCmd>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d15b      	bne.n	80009ac <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	e00c      	b.n	8000914 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80008fa:	7bfc      	ldrb	r4, [r7, #15]
 80008fc:	f7ff fe30 	bl	8000560 <SPI_RxByte>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	f104 0310 	add.w	r3, r4, #16
 8000908:	443b      	add	r3, r7
 800090a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	3301      	adds	r3, #1
 8000912:	73fb      	strb	r3, [r7, #15]
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d9ef      	bls.n	80008fa <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800091a:	7a3b      	ldrb	r3, [r7, #8]
 800091c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SD_disk_initialize+0x104>
 8000924:	230c      	movs	r3, #12
 8000926:	e000      	b.n	800092a <SD_disk_initialize+0x106>
 8000928:	2304      	movs	r3, #4
 800092a:	73bb      	strb	r3, [r7, #14]
 800092c:	e03e      	b.n	80009ac <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800092e:	2100      	movs	r1, #0
 8000930:	2077      	movs	r0, #119	; 0x77
 8000932:	f7ff ff22 	bl	800077a <SD_SendCmd>
 8000936:	4603      	mov	r3, r0
 8000938:	2b01      	cmp	r3, #1
 800093a:	d808      	bhi.n	800094e <SD_disk_initialize+0x12a>
 800093c:	2100      	movs	r1, #0
 800093e:	2069      	movs	r0, #105	; 0x69
 8000940:	f7ff ff1b 	bl	800077a <SD_SendCmd>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	d801      	bhi.n	800094e <SD_disk_initialize+0x12a>
 800094a:	2302      	movs	r3, #2
 800094c:	e000      	b.n	8000950 <SD_disk_initialize+0x12c>
 800094e:	2301      	movs	r3, #1
 8000950:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000952:	7bbb      	ldrb	r3, [r7, #14]
 8000954:	2b02      	cmp	r3, #2
 8000956:	d10e      	bne.n	8000976 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000958:	2100      	movs	r1, #0
 800095a:	2077      	movs	r0, #119	; 0x77
 800095c:	f7ff ff0d 	bl	800077a <SD_SendCmd>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d80e      	bhi.n	8000984 <SD_disk_initialize+0x160>
 8000966:	2100      	movs	r1, #0
 8000968:	2069      	movs	r0, #105	; 0x69
 800096a:	f7ff ff06 	bl	800077a <SD_SendCmd>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d107      	bne.n	8000984 <SD_disk_initialize+0x160>
 8000974:	e00c      	b.n	8000990 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000976:	2100      	movs	r1, #0
 8000978:	2041      	movs	r0, #65	; 0x41
 800097a:	f7ff fefe 	bl	800077a <SD_SendCmd>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d004      	beq.n	800098e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <SD_disk_initialize+0x1c4>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1e2      	bne.n	8000952 <SD_disk_initialize+0x12e>
 800098c:	e000      	b.n	8000990 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800098e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <SD_disk_initialize+0x1c4>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d007      	beq.n	80009a8 <SD_disk_initialize+0x184>
 8000998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099c:	2050      	movs	r0, #80	; 0x50
 800099e:	f7ff feec 	bl	800077a <SD_SendCmd>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SD_disk_initialize+0x188>
 80009a8:	2300      	movs	r3, #0
 80009aa:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <SD_disk_initialize+0x1c8>)
 80009ae:	7bbb      	ldrb	r3, [r7, #14]
 80009b0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009b2:	f7ff fd93 	bl	80004dc <DESELECT>
	SPI_RxByte();
 80009b6:	f7ff fdd3 	bl	8000560 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009ba:	7bbb      	ldrb	r3, [r7, #14]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d008      	beq.n	80009d2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <SD_disk_initialize+0x1c0>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f023 0301 	bic.w	r3, r3, #1
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <SD_disk_initialize+0x1c0>)
 80009ce:	701a      	strb	r2, [r3, #0]
 80009d0:	e001      	b.n	80009d6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80009d2:	f7ff fe4b 	bl	800066c <SD_PowerOff>
	}

	return Stat;
 80009d6:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <SD_disk_initialize+0x1c0>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	b2db      	uxtb	r3, r3
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd90      	pop	{r4, r7, pc}
 80009e4:	20000002 	.word	0x20000002
 80009e8:	2000004c 	.word	0x2000004c
 80009ec:	20000050 	.word	0x20000050

080009f0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SD_disk_status+0x14>
 8000a00:	2301      	movs	r3, #1
 8000a02:	e002      	b.n	8000a0a <SD_disk_status+0x1a>
	return Stat;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <SD_disk_status+0x24>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	20000002 	.word	0x20000002

08000a18 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	4603      	mov	r3, r0
 8000a26:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <SD_disk_read+0x1c>
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d101      	bne.n	8000a38 <SD_disk_read+0x20>
 8000a34:	2304      	movs	r3, #4
 8000a36:	e051      	b.n	8000adc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a38:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <SD_disk_read+0xcc>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SD_disk_read+0x32>
 8000a46:	2303      	movs	r3, #3
 8000a48:	e048      	b.n	8000adc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a4a:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <SD_disk_read+0xd0>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d102      	bne.n	8000a5c <SD_disk_read+0x44>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	025b      	lsls	r3, r3, #9
 8000a5a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a5c:	f7ff fd30 	bl	80004c0 <SELECT>

	if (count == 1)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d111      	bne.n	8000a8a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	2051      	movs	r0, #81	; 0x51
 8000a6a:	f7ff fe86 	bl	800077a <SD_SendCmd>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d129      	bne.n	8000ac8 <SD_disk_read+0xb0>
 8000a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a78:	68b8      	ldr	r0, [r7, #8]
 8000a7a:	f7ff fe0d 	bl	8000698 <SD_RxDataBlock>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d021      	beq.n	8000ac8 <SD_disk_read+0xb0>
 8000a84:	2300      	movs	r3, #0
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	e01e      	b.n	8000ac8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2052      	movs	r0, #82	; 0x52
 8000a8e:	f7ff fe74 	bl	800077a <SD_SendCmd>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d117      	bne.n	8000ac8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9c:	68b8      	ldr	r0, [r7, #8]
 8000a9e:	f7ff fdfb 	bl	8000698 <SD_RxDataBlock>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d00a      	beq.n	8000abe <SD_disk_read+0xa6>
				buff += 512;
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000aae:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1ed      	bne.n	8000a98 <SD_disk_read+0x80>
 8000abc:	e000      	b.n	8000ac0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000abe:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	204c      	movs	r0, #76	; 0x4c
 8000ac4:	f7ff fe59 	bl	800077a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000ac8:	f7ff fd08 	bl	80004dc <DESELECT>
	SPI_RxByte();
 8000acc:	f7ff fd48 	bl	8000560 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	bf14      	ite	ne
 8000ad6:	2301      	movne	r3, #1
 8000ad8:	2300      	moveq	r3, #0
 8000ada:	b2db      	uxtb	r3, r3
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000002 	.word	0x20000002
 8000ae8:	20000050 	.word	0x20000050

08000aec <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	4603      	mov	r3, r0
 8000afa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d102      	bne.n	8000b08 <SD_disk_write+0x1c>
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <SD_disk_write+0x20>
 8000b08:	2304      	movs	r3, #4
 8000b0a:	e06b      	b.n	8000be4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b0c:	4b37      	ldr	r3, [pc, #220]	; (8000bec <SD_disk_write+0x100>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SD_disk_write+0x32>
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	e062      	b.n	8000be4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b1e:	4b33      	ldr	r3, [pc, #204]	; (8000bec <SD_disk_write+0x100>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SD_disk_write+0x44>
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	e059      	b.n	8000be4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b30:	4b2f      	ldr	r3, [pc, #188]	; (8000bf0 <SD_disk_write+0x104>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <SD_disk_write+0x56>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	025b      	lsls	r3, r3, #9
 8000b40:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b42:	f7ff fcbd 	bl	80004c0 <SELECT>

	if (count == 1)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d110      	bne.n	8000b6e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	2058      	movs	r0, #88	; 0x58
 8000b50:	f7ff fe13 	bl	800077a <SD_SendCmd>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d13a      	bne.n	8000bd0 <SD_disk_write+0xe4>
 8000b5a:	21fe      	movs	r1, #254	; 0xfe
 8000b5c:	68b8      	ldr	r0, [r7, #8]
 8000b5e:	f7ff fdc9 	bl	80006f4 <SD_TxDataBlock>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d033      	beq.n	8000bd0 <SD_disk_write+0xe4>
			count = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	e030      	b.n	8000bd0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <SD_disk_write+0x104>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d007      	beq.n	8000b8a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2077      	movs	r0, #119	; 0x77
 8000b7e:	f7ff fdfc 	bl	800077a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b82:	6839      	ldr	r1, [r7, #0]
 8000b84:	2057      	movs	r0, #87	; 0x57
 8000b86:	f7ff fdf8 	bl	800077a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	2059      	movs	r0, #89	; 0x59
 8000b8e:	f7ff fdf4 	bl	800077a <SD_SendCmd>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d11b      	bne.n	8000bd0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b98:	21fc      	movs	r1, #252	; 0xfc
 8000b9a:	68b8      	ldr	r0, [r7, #8]
 8000b9c:	f7ff fdaa 	bl	80006f4 <SD_TxDataBlock>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d00a      	beq.n	8000bbc <SD_disk_write+0xd0>
				buff += 512;
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1ee      	bne.n	8000b98 <SD_disk_write+0xac>
 8000bba:	e000      	b.n	8000bbe <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bbc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000bbe:	21fd      	movs	r1, #253	; 0xfd
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff fd97 	bl	80006f4 <SD_TxDataBlock>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d101      	bne.n	8000bd0 <SD_disk_write+0xe4>
			{
				count = 1;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000bd0:	f7ff fc84 	bl	80004dc <DESELECT>
	SPI_RxByte();
 8000bd4:	f7ff fcc4 	bl	8000560 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bf14      	ite	ne
 8000bde:	2301      	movne	r3, #1
 8000be0:	2300      	moveq	r3, #0
 8000be2:	b2db      	uxtb	r3, r3
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000002 	.word	0x20000002
 8000bf0:	20000050 	.word	0x20000050

08000bf4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b08b      	sub	sp, #44	; 0x2c
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	603a      	str	r2, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	460b      	mov	r3, r1
 8000c02:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SD_disk_ioctl+0x1e>
 8000c0e:	2304      	movs	r3, #4
 8000c10:	e115      	b.n	8000e3e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	2b05      	cmp	r3, #5
 8000c1c:	d124      	bne.n	8000c68 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c1e:	6a3b      	ldr	r3, [r7, #32]
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d012      	beq.n	8000c4c <SD_disk_ioctl+0x58>
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	dc1a      	bgt.n	8000c60 <SD_disk_ioctl+0x6c>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <SD_disk_ioctl+0x40>
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d006      	beq.n	8000c40 <SD_disk_ioctl+0x4c>
 8000c32:	e015      	b.n	8000c60 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c34:	f7ff fd1a 	bl	800066c <SD_PowerOff>
			res = RES_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c3e:	e0fc      	b.n	8000e3a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c40:	f7ff fcd2 	bl	80005e8 <SD_PowerOn>
			res = RES_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c4a:	e0f6      	b.n	8000e3a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	1c5c      	adds	r4, r3, #1
 8000c50:	f7ff fd18 	bl	8000684 <SD_CheckPower>
 8000c54:	4603      	mov	r3, r0
 8000c56:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c5e:	e0ec      	b.n	8000e3a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000c60:	2304      	movs	r3, #4
 8000c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c66:	e0e8      	b.n	8000e3a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c68:	4b77      	ldr	r3, [pc, #476]	; (8000e48 <SD_disk_ioctl+0x254>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SD_disk_ioctl+0x86>
 8000c76:	2303      	movs	r3, #3
 8000c78:	e0e1      	b.n	8000e3e <SD_disk_ioctl+0x24a>

		SELECT();
 8000c7a:	f7ff fc21 	bl	80004c0 <SELECT>

		switch (ctrl)
 8000c7e:	79bb      	ldrb	r3, [r7, #6]
 8000c80:	2b0d      	cmp	r3, #13
 8000c82:	f200 80cb 	bhi.w	8000e1c <SD_disk_ioctl+0x228>
 8000c86:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <SD_disk_ioctl+0x98>)
 8000c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8c:	08000d87 	.word	0x08000d87
 8000c90:	08000cc5 	.word	0x08000cc5
 8000c94:	08000d77 	.word	0x08000d77
 8000c98:	08000e1d 	.word	0x08000e1d
 8000c9c:	08000e1d 	.word	0x08000e1d
 8000ca0:	08000e1d 	.word	0x08000e1d
 8000ca4:	08000e1d 	.word	0x08000e1d
 8000ca8:	08000e1d 	.word	0x08000e1d
 8000cac:	08000e1d 	.word	0x08000e1d
 8000cb0:	08000e1d 	.word	0x08000e1d
 8000cb4:	08000e1d 	.word	0x08000e1d
 8000cb8:	08000d99 	.word	0x08000d99
 8000cbc:	08000dbd 	.word	0x08000dbd
 8000cc0:	08000de1 	.word	0x08000de1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2049      	movs	r0, #73	; 0x49
 8000cc8:	f7ff fd57 	bl	800077a <SD_SendCmd>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f040 80a8 	bne.w	8000e24 <SD_disk_ioctl+0x230>
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2110      	movs	r1, #16
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fcdc 	bl	8000698 <SD_RxDataBlock>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 809e 	beq.w	8000e24 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000ce8:	7b3b      	ldrb	r3, [r7, #12]
 8000cea:	099b      	lsrs	r3, r3, #6
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d10e      	bne.n	8000d10 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000cf2:	7d7b      	ldrb	r3, [r7, #21]
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	7d3b      	ldrb	r3, [r7, #20]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	4413      	add	r3, r2
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	3301      	adds	r3, #1
 8000d04:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d06:	8bfb      	ldrh	r3, [r7, #30]
 8000d08:	029a      	lsls	r2, r3, #10
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	e02e      	b.n	8000d6e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d10:	7c7b      	ldrb	r3, [r7, #17]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	7dbb      	ldrb	r3, [r7, #22]
 8000d1a:	09db      	lsrs	r3, r3, #7
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4413      	add	r3, r2
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	7d7b      	ldrb	r3, [r7, #21]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	f003 0306 	and.w	r3, r3, #6
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	4413      	add	r3, r2
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	3302      	adds	r3, #2
 8000d34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d38:	7d3b      	ldrb	r3, [r7, #20]
 8000d3a:	099b      	lsrs	r3, r3, #6
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	7cfb      	ldrb	r3, [r7, #19]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4413      	add	r3, r2
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	7cbb      	ldrb	r3, [r7, #18]
 8000d4e:	029b      	lsls	r3, r3, #10
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	4413      	add	r3, r2
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d60:	8bfa      	ldrh	r2, [r7, #30]
 8000d62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d66:	3b09      	subs	r3, #9
 8000d68:	409a      	lsls	r2, r3
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000d74:	e056      	b.n	8000e24 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d7c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d84:	e055      	b.n	8000e32 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000d86:	f7ff fc15 	bl	80005b4 <SD_ReadyWait>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2bff      	cmp	r3, #255	; 0xff
 8000d8e:	d14b      	bne.n	8000e28 <SD_disk_ioctl+0x234>
 8000d90:	2300      	movs	r3, #0
 8000d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d96:	e047      	b.n	8000e28 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2049      	movs	r0, #73	; 0x49
 8000d9c:	f7ff fced 	bl	800077a <SD_SendCmd>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d142      	bne.n	8000e2c <SD_disk_ioctl+0x238>
 8000da6:	2110      	movs	r1, #16
 8000da8:	6a38      	ldr	r0, [r7, #32]
 8000daa:	f7ff fc75 	bl	8000698 <SD_RxDataBlock>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d03b      	beq.n	8000e2c <SD_disk_ioctl+0x238>
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dba:	e037      	b.n	8000e2c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	204a      	movs	r0, #74	; 0x4a
 8000dc0:	f7ff fcdb 	bl	800077a <SD_SendCmd>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d132      	bne.n	8000e30 <SD_disk_ioctl+0x23c>
 8000dca:	2110      	movs	r1, #16
 8000dcc:	6a38      	ldr	r0, [r7, #32]
 8000dce:	f7ff fc63 	bl	8000698 <SD_RxDataBlock>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d02b      	beq.n	8000e30 <SD_disk_ioctl+0x23c>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dde:	e027      	b.n	8000e30 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000de0:	2100      	movs	r1, #0
 8000de2:	207a      	movs	r0, #122	; 0x7a
 8000de4:	f7ff fcc9 	bl	800077a <SD_SendCmd>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d116      	bne.n	8000e1c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000df4:	e00b      	b.n	8000e0e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000df6:	6a3c      	ldr	r4, [r7, #32]
 8000df8:	1c63      	adds	r3, r4, #1
 8000dfa:	623b      	str	r3, [r7, #32]
 8000dfc:	f7ff fbb0 	bl	8000560 <SPI_RxByte>
 8000e00:	4603      	mov	r3, r0
 8000e02:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e08:	3301      	adds	r3, #1
 8000e0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d9ef      	bls.n	8000df6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e22:	e006      	b.n	8000e32 <SD_disk_ioctl+0x23e>
			break;
 8000e24:	bf00      	nop
 8000e26:	e004      	b.n	8000e32 <SD_disk_ioctl+0x23e>
			break;
 8000e28:	bf00      	nop
 8000e2a:	e002      	b.n	8000e32 <SD_disk_ioctl+0x23e>
			break;
 8000e2c:	bf00      	nop
 8000e2e:	e000      	b.n	8000e32 <SD_disk_ioctl+0x23e>
			break;
 8000e30:	bf00      	nop
		}

		DESELECT();
 8000e32:	f7ff fb53 	bl	80004dc <DESELECT>
		SPI_RxByte();
 8000e36:	f7ff fb93 	bl	8000560 <SPI_RxByte>
	}

	return res;
 8000e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	372c      	adds	r7, #44	; 0x2c
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd90      	pop	{r4, r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000002 	.word	0x20000002

08000e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e50:	f000 fb60 	bl	8001514 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_ILI9341(); //initialize screen
 8000e54:	f7ff f97a 	bl	800014c <init_ILI9341>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e58:	f000 f807 	bl	8000e6a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5c:	f000 f876 	bl	8000f4c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e60:	f000 f83e 	bl	8000ee0 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000e64:	f001 fea6 	bl	8002bb4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <main+0x1c>

08000e6a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b090      	sub	sp, #64	; 0x40
 8000e6e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e70:	f107 0318 	add.w	r3, r7, #24
 8000e74:	2228      	movs	r2, #40	; 0x28
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 ff85 	bl	8002d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e90:	2301      	movs	r3, #1
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e94:	2310      	movs	r3, #16
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9c:	f107 0318 	add.w	r3, r7, #24
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fe97 	bl	8001bd4 <HAL_RCC_OscConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000eac:	f000 fa1e 	bl	80012ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 f905 	bl	80020d8 <HAL_RCC_ClockConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ed4:	f000 fa0a 	bl	80012ec <Error_Handler>
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3740      	adds	r7, #64	; 0x40
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000ee6:	4a18      	ldr	r2, [pc, #96]	; (8000f48 <MX_SPI1_Init+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000eec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f2c:	220a      	movs	r2, #10
 8000f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f32:	f001 fa37 	bl	80023a4 <HAL_SPI_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f3c:	f000 f9d6 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000054 	.word	0x20000054
 8000f48:	40013000 	.word	0x40013000

08000f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b3d      	ldr	r3, [pc, #244]	; (8001058 <MX_GPIO_Init+0x10c>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a3c      	ldr	r2, [pc, #240]	; (8001058 <MX_GPIO_Init+0x10c>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b3a      	ldr	r3, [pc, #232]	; (8001058 <MX_GPIO_Init+0x10c>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f78:	4b37      	ldr	r3, [pc, #220]	; (8001058 <MX_GPIO_Init+0x10c>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a36      	ldr	r2, [pc, #216]	; (8001058 <MX_GPIO_Init+0x10c>)
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b34      	ldr	r3, [pc, #208]	; (8001058 <MX_GPIO_Init+0x10c>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0308 	and.w	r3, r3, #8
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SCR_DC_Pin|SCR_NCS_Pin|SD_NCS_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	211c      	movs	r1, #28
 8000f94:	4831      	ldr	r0, [pc, #196]	; (800105c <MX_GPIO_Init+0x110>)
 8000f96:	f000 fdec 	bl	8001b72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCR_BLK_Pin|SCR_RST_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2130      	movs	r1, #48	; 0x30
 8000f9e:	4830      	ldr	r0, [pc, #192]	; (8001060 <MX_GPIO_Init+0x114>)
 8000fa0:	f000 fde7 	bl	8001b72 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_A_Pin GPIO_B_Pin GPIO_UP_Pin GPIO_LEFT_Pin
                           GPIO_DOWN_Pin GPIO_RIGHT_Pin */
  GPIO_InitStruct.Pin = GPIO_A_Pin|GPIO_B_Pin|GPIO_UP_Pin|GPIO_LEFT_Pin
 8000fa4:	f640 7303 	movw	r3, #3843	; 0xf03
 8000fa8:	60bb      	str	r3, [r7, #8]
                          |GPIO_DOWN_Pin|GPIO_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000faa:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <MX_GPIO_Init+0x118>)
 8000fac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4828      	ldr	r0, [pc, #160]	; (800105c <MX_GPIO_Init+0x110>)
 8000fba:	f000 fc3f 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : SCR_DC_Pin SCR_NCS_Pin SD_NCS_Pin */
  GPIO_InitStruct.Pin = SCR_DC_Pin|SCR_NCS_Pin|SD_NCS_Pin;
 8000fbe:	231c      	movs	r3, #28
 8000fc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4821      	ldr	r0, [pc, #132]	; (800105c <MX_GPIO_Init+0x110>)
 8000fd6:	f000 fc31 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_X_Pin GPIO_Y_Pin */
  GPIO_InitStruct.Pin = GPIO_X_Pin|GPIO_Y_Pin;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	4619      	mov	r1, r3
 8000fec:	481c      	ldr	r0, [pc, #112]	; (8001060 <MX_GPIO_Init+0x114>)
 8000fee:	f000 fc25 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : SCR_BLK_Pin SCR_RST_Pin */
  GPIO_InitStruct.Pin = SCR_BLK_Pin|SCR_RST_Pin;
 8000ff2:	2330      	movs	r3, #48	; 0x30
 8000ff4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2302      	movs	r3, #2
 8001000:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	4619      	mov	r1, r3
 8001008:	4815      	ldr	r0, [pc, #84]	; (8001060 <MX_GPIO_Init+0x114>)
 800100a:	f000 fc17 	bl	800183c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2006      	movs	r0, #6
 8001014:	f000 fbdb 	bl	80017ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001018:	2006      	movs	r0, #6
 800101a:	f000 fbf4 	bl	8001806 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2007      	movs	r0, #7
 8001024:	f000 fbd3 	bl	80017ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001028:	2007      	movs	r0, #7
 800102a:	f000 fbec 	bl	8001806 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2017      	movs	r0, #23
 8001034:	f000 fbcb 	bl	80017ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001038:	2017      	movs	r0, #23
 800103a:	f000 fbe4 	bl	8001806 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	2028      	movs	r0, #40	; 0x28
 8001044:	f000 fbc3 	bl	80017ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001048:	2028      	movs	r0, #40	; 0x28
 800104a:	f000 fbdc 	bl	8001806 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000
 800105c:	40010800 	.word	0x40010800
 8001060:	40010c00 	.word	0x40010c00
 8001064:	10110000 	.word	0x10110000

08001068 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af02      	add	r7, sp, #8
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
	 if(GPIO_Pin == GPIO_A_Pin) // check if GPIO_A is pressed
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d102      	bne.n	800107e <HAL_GPIO_EXTI_Callback+0x16>
	  {
	    // handle GPIO_A press
		 displayInversionON();
 8001078:	f7ff f9ae 	bl	80003d8 <displayInversionON>
	    	columnAddressSet(start_col, end_col);
	    	pageAddressSet(start_pag, end_pag);
	    	writeMemoryContinue(red_clr, start_col, end_col, start_pag, end_pag);
	    }
	  }
}
 800107c:	e126      	b.n	80012cc <HAL_GPIO_EXTI_Callback+0x264>
	  else if(GPIO_Pin == GPIO_B_Pin) // check if GPIO_B is pressed
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d102      	bne.n	800108a <HAL_GPIO_EXTI_Callback+0x22>
		  displayInversionOFF();
 8001084:	f7ff f9c8 	bl	8000418 <displayInversionOFF>
}
 8001088:	e120      	b.n	80012cc <HAL_GPIO_EXTI_Callback+0x264>
	  else if(GPIO_Pin >= GPIO_UP_Pin && GPIO_Pin <= GPIO_LEFT_Pin) // check if GPIO_UP or GPIO_LEFT is pressed
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	2bff      	cmp	r3, #255	; 0xff
 800108e:	f240 808c 	bls.w	80011aa <HAL_GPIO_EXTI_Callback+0x142>
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001098:	f200 8087 	bhi.w	80011aa <HAL_GPIO_EXTI_Callback+0x142>
		  ClearScreen(start_col, end_col, start_pag, end_pag);
 800109c:	4b8d      	ldr	r3, [pc, #564]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	b2d8      	uxtb	r0, r3
 80010a2:	4b8d      	ldr	r3, [pc, #564]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x270>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	b2d9      	uxtb	r1, r3
 80010a8:	4b8c      	ldr	r3, [pc, #560]	; (80012dc <HAL_GPIO_EXTI_Callback+0x274>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b8c      	ldr	r3, [pc, #560]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x278>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f7ff f9d0 	bl	8000458 <ClearScreen>
	    if(HAL_GPIO_ReadPin(GPIOA, GPIO_UP_Pin) == GPIO_PIN_SET) // check if GPIO_UP is pressed
 80010b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010bc:	4889      	ldr	r0, [pc, #548]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010be:	f000 fd41 	bl	8001b44 <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d133      	bne.n	8001130 <HAL_GPIO_EXTI_Callback+0xc8>
	    	start_pag--;
 80010c8:	4b84      	ldr	r3, [pc, #528]	; (80012dc <HAL_GPIO_EXTI_Callback+0x274>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	4b82      	ldr	r3, [pc, #520]	; (80012dc <HAL_GPIO_EXTI_Callback+0x274>)
 80010d2:	801a      	strh	r2, [r3, #0]
	    	end_pag--;
 80010d4:	4b82      	ldr	r3, [pc, #520]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x278>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	3b01      	subs	r3, #1
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b80      	ldr	r3, [pc, #512]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x278>)
 80010de:	801a      	strh	r2, [r3, #0]
	    	columnAddressSet(start_col, end_col);
 80010e0:	4b7c      	ldr	r3, [pc, #496]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	4a7c      	ldr	r2, [pc, #496]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x270>)
 80010e8:	8812      	ldrh	r2, [r2, #0]
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f84c 	bl	800018c <columnAddressSet>
	    	pageAddressSet(start_pag, end_pag);
 80010f4:	4b79      	ldr	r3, [pc, #484]	; (80012dc <HAL_GPIO_EXTI_Callback+0x274>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4a79      	ldr	r2, [pc, #484]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x278>)
 80010fc:	8812      	ldrh	r2, [r2, #0]
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f8ae 	bl	8000264 <pageAddressSet>
	    	writeMemoryContinue(red_clr, start_col, end_col, start_pag, end_pag);
 8001108:	4b77      	ldr	r3, [pc, #476]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x280>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	b2d8      	uxtb	r0, r3
 800110e:	4b71      	ldr	r3, [pc, #452]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	b2d9      	uxtb	r1, r3
 8001114:	4b70      	ldr	r3, [pc, #448]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x270>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b70      	ldr	r3, [pc, #448]	; (80012dc <HAL_GPIO_EXTI_Callback+0x274>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	b2dc      	uxtb	r4, r3
 8001120:	4b6f      	ldr	r3, [pc, #444]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x278>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4623      	mov	r3, r4
 800112a:	f7ff f907 	bl	800033c <writeMemoryContinue>
	    if(HAL_GPIO_ReadPin(GPIOA, GPIO_UP_Pin) == GPIO_PIN_SET) // check if GPIO_UP is pressed
 800112e:	e0cc      	b.n	80012ca <HAL_GPIO_EXTI_Callback+0x262>
	    else if(HAL_GPIO_ReadPin(GPIOA,GPIO_LEFT_Pin) == GPIO_PIN_SET) // check if GPIO_LEFT is pressed
 8001130:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001134:	486b      	ldr	r0, [pc, #428]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001136:	f000 fd05 	bl	8001b44 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b01      	cmp	r3, #1
 800113e:	f040 80c4 	bne.w	80012ca <HAL_GPIO_EXTI_Callback+0x262>
	    	start_col--;
 8001142:	4b64      	ldr	r3, [pc, #400]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	3b01      	subs	r3, #1
 8001148:	b29a      	uxth	r2, r3
 800114a:	4b62      	ldr	r3, [pc, #392]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 800114c:	801a      	strh	r2, [r3, #0]
	    	end_col--;
 800114e:	4b62      	ldr	r3, [pc, #392]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x270>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	3b01      	subs	r3, #1
 8001154:	b29a      	uxth	r2, r3
 8001156:	4b60      	ldr	r3, [pc, #384]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x270>)
 8001158:	801a      	strh	r2, [r3, #0]
	    	columnAddressSet(start_col, end_col);
 800115a:	4b5e      	ldr	r3, [pc, #376]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4a5d      	ldr	r2, [pc, #372]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x270>)
 8001162:	8812      	ldrh	r2, [r2, #0]
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f80f 	bl	800018c <columnAddressSet>
	    	pageAddressSet(start_pag, end_pag);
 800116e:	4b5b      	ldr	r3, [pc, #364]	; (80012dc <HAL_GPIO_EXTI_Callback+0x274>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4a5a      	ldr	r2, [pc, #360]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x278>)
 8001176:	8812      	ldrh	r2, [r2, #0]
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f871 	bl	8000264 <pageAddressSet>
	    	writeMemoryContinue(red_clr, start_col, end_col, start_pag, end_pag);
 8001182:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	b2d8      	uxtb	r0, r3
 8001188:	4b52      	ldr	r3, [pc, #328]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	b2d9      	uxtb	r1, r3
 800118e:	4b52      	ldr	r3, [pc, #328]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x270>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b51      	ldr	r3, [pc, #324]	; (80012dc <HAL_GPIO_EXTI_Callback+0x274>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	b2dc      	uxtb	r4, r3
 800119a:	4b51      	ldr	r3, [pc, #324]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x278>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	4623      	mov	r3, r4
 80011a4:	f7ff f8ca 	bl	800033c <writeMemoryContinue>
	    if(HAL_GPIO_ReadPin(GPIOA, GPIO_UP_Pin) == GPIO_PIN_SET) // check if GPIO_UP is pressed
 80011a8:	e08f      	b.n	80012ca <HAL_GPIO_EXTI_Callback+0x262>
	  else if(GPIO_Pin >= GPIO_DOWN_Pin && GPIO_Pin <= GPIO_RIGHT_Pin) // check if GPIO_DOWN or GPIO_RIGHT is pressed
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b0:	f0c0 808c 	bcc.w	80012cc <HAL_GPIO_EXTI_Callback+0x264>
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011ba:	f200 8087 	bhi.w	80012cc <HAL_GPIO_EXTI_Callback+0x264>
		  ClearScreen(start_col, end_col, start_pag, end_pag);
 80011be:	4b45      	ldr	r3, [pc, #276]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	b2d8      	uxtb	r0, r3
 80011c4:	4b44      	ldr	r3, [pc, #272]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x270>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	b2d9      	uxtb	r1, r3
 80011ca:	4b44      	ldr	r3, [pc, #272]	; (80012dc <HAL_GPIO_EXTI_Callback+0x274>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b43      	ldr	r3, [pc, #268]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x278>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	f7ff f93f 	bl	8000458 <ClearScreen>
	    if(HAL_GPIO_ReadPin(GPIOA, GPIO_DOWN_Pin) == GPIO_PIN_SET) // check if GPIO_DOWN is pressed
 80011da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011de:	4841      	ldr	r0, [pc, #260]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x27c>)
 80011e0:	f000 fcb0 	bl	8001b44 <HAL_GPIO_ReadPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d133      	bne.n	8001252 <HAL_GPIO_EXTI_Callback+0x1ea>
	    	start_pag++;
 80011ea:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <HAL_GPIO_EXTI_Callback+0x274>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <HAL_GPIO_EXTI_Callback+0x274>)
 80011f4:	801a      	strh	r2, [r3, #0]
	    	end_pag++;
 80011f6:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x278>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x278>)
 8001200:	801a      	strh	r2, [r3, #0]
	    	columnAddressSet(start_col, end_col);
 8001202:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4a33      	ldr	r2, [pc, #204]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x270>)
 800120a:	8812      	ldrh	r2, [r2, #0]
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7fe ffbb 	bl	800018c <columnAddressSet>
	    	pageAddressSet(start_pag, end_pag);
 8001216:	4b31      	ldr	r3, [pc, #196]	; (80012dc <HAL_GPIO_EXTI_Callback+0x274>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4a30      	ldr	r2, [pc, #192]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x278>)
 800121e:	8812      	ldrh	r2, [r2, #0]
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f81d 	bl	8000264 <pageAddressSet>
	    	writeMemoryContinue(red_clr, start_col, end_col, start_pag, end_pag);
 800122a:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x280>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b2d8      	uxtb	r0, r3
 8001230:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	b2d9      	uxtb	r1, r3
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x270>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <HAL_GPIO_EXTI_Callback+0x274>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	b2dc      	uxtb	r4, r3
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x278>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	4623      	mov	r3, r4
 800124c:	f7ff f876 	bl	800033c <writeMemoryContinue>
}
 8001250:	e03c      	b.n	80012cc <HAL_GPIO_EXTI_Callback+0x264>
	    else if(HAL_GPIO_ReadPin(GPIOA, GPIO_RIGHT_Pin) == GPIO_PIN_SET) // check if GPIO_RIGHT is pressed
 8001252:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001256:	4823      	ldr	r0, [pc, #140]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001258:	f000 fc74 	bl	8001b44 <HAL_GPIO_ReadPin>
 800125c:	4603      	mov	r3, r0
 800125e:	2b01      	cmp	r3, #1
 8001260:	d134      	bne.n	80012cc <HAL_GPIO_EXTI_Callback+0x264>
	    	start_col++;
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	3301      	adds	r3, #1
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 800126c:	801a      	strh	r2, [r3, #0]
	    	end_col++;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x270>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	b29a      	uxth	r2, r3
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x270>)
 8001278:	801a      	strh	r2, [r3, #0]
	    	columnAddressSet(start_col, end_col);
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x270>)
 8001282:	8812      	ldrh	r2, [r2, #0]
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7fe ff7f 	bl	800018c <columnAddressSet>
	    	pageAddressSet(start_pag, end_pag);
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <HAL_GPIO_EXTI_Callback+0x274>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x278>)
 8001296:	8812      	ldrh	r2, [r2, #0]
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7fe ffe1 	bl	8000264 <pageAddressSet>
	    	writeMemoryContinue(red_clr, start_col, end_col, start_pag, end_pag);
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x280>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	b2d8      	uxtb	r0, r3
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x26c>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	b2d9      	uxtb	r1, r3
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x270>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_GPIO_EXTI_Callback+0x274>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	b2dc      	uxtb	r4, r3
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x278>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	4623      	mov	r3, r4
 80012c4:	f7ff f83a 	bl	800033c <writeMemoryContinue>
}
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_EXTI_Callback+0x264>
	    if(HAL_GPIO_ReadPin(GPIOA, GPIO_UP_Pin) == GPIO_PIN_SET) // check if GPIO_UP is pressed
 80012ca:	bf00      	nop
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd90      	pop	{r4, r7, pc}
 80012d4:	20000008 	.word	0x20000008
 80012d8:	2000000a 	.word	0x2000000a
 80012dc:	20000004 	.word	0x20000004
 80012e0:	20000006 	.word	0x20000006
 80012e4:	40010800 	.word	0x40010800
 80012e8:	2000000c 	.word	0x2000000c

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <Error_Handler+0x8>
	...

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_MspInit+0x5c>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	4a14      	ldr	r2, [pc, #80]	; (8001354 <HAL_MspInit+0x5c>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6193      	str	r3, [r2, #24]
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_MspInit+0x5c>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_MspInit+0x5c>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <HAL_MspInit+0x5c>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	61d3      	str	r3, [r2, #28]
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_MspInit+0x5c>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_MspInit+0x60>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <HAL_MspInit+0x60>)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	40021000 	.word	0x40021000
 8001358:	40010000 	.word	0x40010000

0800135c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <HAL_SPI_MspInit+0x88>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d12f      	bne.n	80013dc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <HAL_SPI_MspInit+0x8c>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a19      	ldr	r2, [pc, #100]	; (80013e8 <HAL_SPI_MspInit+0x8c>)
 8001382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <HAL_SPI_MspInit+0x8c>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_SPI_MspInit+0x8c>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <HAL_SPI_MspInit+0x8c>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_SPI_MspInit+0x8c>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013ac:	23a0      	movs	r3, #160	; 0xa0
 80013ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	480b      	ldr	r0, [pc, #44]	; (80013ec <HAL_SPI_MspInit+0x90>)
 80013c0:	f000 fa3c 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013c4:	2340      	movs	r3, #64	; 0x40
 80013c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4619      	mov	r1, r3
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <HAL_SPI_MspInit+0x90>)
 80013d8:	f000 fa30 	bl	800183c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013dc:	bf00      	nop
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40013000 	.word	0x40013000
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010800 	.word	0x40010800

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler+0x4>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <UsageFault_Handler+0x4>

0800140e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
	...

08001434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <SysTick_Handler+0x34>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <SysTick_Handler+0x18>
		Timer1--;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <SysTick_Handler+0x34>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	3b01      	subs	r3, #1
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <SysTick_Handler+0x34>)
 800144a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <SysTick_Handler+0x38>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <SysTick_Handler+0x2c>
		Timer2--;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Handler+0x38>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	3b01      	subs	r3, #1
 800145a:	b29a      	uxth	r2, r3
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <SysTick_Handler+0x38>)
 800145e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001460:	f000 f89e 	bl	80015a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2000004c 	.word	0x2000004c
 800146c:	2000004e 	.word	0x2000004e

08001470 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_A_Pin);
 8001474:	2001      	movs	r0, #1
 8001476:	f000 fb95 	bl	8001ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}

0800147e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_B_Pin);
 8001482:	2002      	movs	r0, #2
 8001484:	f000 fb8e 	bl	8001ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_UP_Pin);
 8001490:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001494:	f000 fb86 	bl	8001ba4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_LEFT_Pin);
 8001498:	f44f 7000 	mov.w	r0, #512	; 0x200
 800149c:	f000 fb82 	bl	8001ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_DOWN_Pin);
 80014a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014ac:	f000 fb7a 	bl	8001ba4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_RIGHT_Pin);
 80014b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014b4:	f000 fb76 	bl	8001ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ca:	490d      	ldr	r1, [pc, #52]	; (8001500 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d0:	e002      	b.n	80014d8 <LoopCopyDataInit>

080014d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d6:	3304      	adds	r3, #4

080014d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014dc:	d3f9      	bcc.n	80014d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014e0:	4c0a      	ldr	r4, [pc, #40]	; (800150c <LoopFillZerobss+0x22>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e4:	e001      	b.n	80014ea <LoopFillZerobss>

080014e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e8:	3204      	adds	r2, #4

080014ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ec:	d3fb      	bcc.n	80014e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ee:	f7ff ffe5 	bl	80014bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f2:	f001 fc25 	bl	8002d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014f6:	f7ff fca9 	bl	8000e4c <main>
  bx lr
 80014fa:	4770      	bx	lr
  ldr r0, =_sdata
 80014fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001500:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001504:	08002dd8 	.word	0x08002dd8
  ldr r2, =_sbss
 8001508:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800150c:	200000c4 	.word	0x200000c4

08001510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC1_2_IRQHandler>
	...

08001514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_Init+0x28>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a07      	ldr	r2, [pc, #28]	; (800153c <HAL_Init+0x28>)
 800151e:	f043 0310 	orr.w	r3, r3, #16
 8001522:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001524:	2003      	movs	r0, #3
 8001526:	f000 f947 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152a:	200f      	movs	r0, #15
 800152c:	f000 f808 	bl	8001540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001530:	f7ff fee2 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40022000 	.word	0x40022000

08001540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_InitTick+0x54>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_InitTick+0x58>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001556:	fbb3 f3f1 	udiv	r3, r3, r1
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f95f 	bl	8001822 <HAL_SYSTICK_Config>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e00e      	b.n	800158c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b0f      	cmp	r3, #15
 8001572:	d80a      	bhi.n	800158a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001574:	2200      	movs	r2, #0
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f000 f927 	bl	80017ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001580:	4a06      	ldr	r2, [pc, #24]	; (800159c <HAL_InitTick+0x5c>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	e000      	b.n	800158c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000010 	.word	0x20000010
 8001598:	20000018 	.word	0x20000018
 800159c:	20000014 	.word	0x20000014

080015a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_IncTick+0x1c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_IncTick+0x20>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <HAL_IncTick+0x20>)
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	20000018 	.word	0x20000018
 80015c0:	200000ac 	.word	0x200000ac

080015c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return uwTick;
 80015c8:	4b02      	ldr	r3, [pc, #8]	; (80015d4 <HAL_GetTick+0x10>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	200000ac 	.word	0x200000ac

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff fff0 	bl	80015c4 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffe0 	bl	80015c4 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000018 	.word	0x20000018

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4906      	ldr	r1, [pc, #24]	; (80016b8 <__NVIC_EnableIRQ+0x34>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100

080016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db0a      	blt.n	80016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	490c      	ldr	r1, [pc, #48]	; (8001708 <__NVIC_SetPriority+0x4c>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	440b      	add	r3, r1
 80016e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e4:	e00a      	b.n	80016fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4908      	ldr	r1, [pc, #32]	; (800170c <__NVIC_SetPriority+0x50>)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	3b04      	subs	r3, #4
 80016f4:	0112      	lsls	r2, r2, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	761a      	strb	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f1c3 0307 	rsb	r3, r3, #7
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf28      	it	cs
 800172e:	2304      	movcs	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3304      	adds	r3, #4
 8001736:	2b06      	cmp	r3, #6
 8001738:	d902      	bls.n	8001740 <NVIC_EncodePriority+0x30>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b03      	subs	r3, #3
 800173e:	e000      	b.n	8001742 <NVIC_EncodePriority+0x32>
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43d9      	mvns	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	4313      	orrs	r3, r2
         );
}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f7ff ff90 	bl	80016bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff2d 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e0:	f7ff ff42 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	f7ff ff90 	bl	8001710 <NVIC_EncodePriority>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff5f 	bl	80016bc <__NVIC_SetPriority>
}
 80017fe:	bf00      	nop
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff35 	bl	8001684 <__NVIC_EnableIRQ>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffa2 	bl	8001774 <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b480      	push	{r7}
 800183e:	b08b      	sub	sp, #44	; 0x2c
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184e:	e169      	b.n	8001b24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001850:	2201      	movs	r2, #1
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	429a      	cmp	r2, r3
 800186a:	f040 8158 	bne.w	8001b1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4a9a      	ldr	r2, [pc, #616]	; (8001adc <HAL_GPIO_Init+0x2a0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d05e      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001878:	4a98      	ldr	r2, [pc, #608]	; (8001adc <HAL_GPIO_Init+0x2a0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d875      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 800187e:	4a98      	ldr	r2, [pc, #608]	; (8001ae0 <HAL_GPIO_Init+0x2a4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d058      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001884:	4a96      	ldr	r2, [pc, #600]	; (8001ae0 <HAL_GPIO_Init+0x2a4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d86f      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 800188a:	4a96      	ldr	r2, [pc, #600]	; (8001ae4 <HAL_GPIO_Init+0x2a8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d052      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001890:	4a94      	ldr	r2, [pc, #592]	; (8001ae4 <HAL_GPIO_Init+0x2a8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d869      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 8001896:	4a94      	ldr	r2, [pc, #592]	; (8001ae8 <HAL_GPIO_Init+0x2ac>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d04c      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 800189c:	4a92      	ldr	r2, [pc, #584]	; (8001ae8 <HAL_GPIO_Init+0x2ac>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d863      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018a2:	4a92      	ldr	r2, [pc, #584]	; (8001aec <HAL_GPIO_Init+0x2b0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d046      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 80018a8:	4a90      	ldr	r2, [pc, #576]	; (8001aec <HAL_GPIO_Init+0x2b0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d85d      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018ae:	2b12      	cmp	r3, #18
 80018b0:	d82a      	bhi.n	8001908 <HAL_GPIO_Init+0xcc>
 80018b2:	2b12      	cmp	r3, #18
 80018b4:	d859      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018b6:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <HAL_GPIO_Init+0x80>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	08001937 	.word	0x08001937
 80018c0:	08001911 	.word	0x08001911
 80018c4:	08001923 	.word	0x08001923
 80018c8:	08001965 	.word	0x08001965
 80018cc:	0800196b 	.word	0x0800196b
 80018d0:	0800196b 	.word	0x0800196b
 80018d4:	0800196b 	.word	0x0800196b
 80018d8:	0800196b 	.word	0x0800196b
 80018dc:	0800196b 	.word	0x0800196b
 80018e0:	0800196b 	.word	0x0800196b
 80018e4:	0800196b 	.word	0x0800196b
 80018e8:	0800196b 	.word	0x0800196b
 80018ec:	0800196b 	.word	0x0800196b
 80018f0:	0800196b 	.word	0x0800196b
 80018f4:	0800196b 	.word	0x0800196b
 80018f8:	0800196b 	.word	0x0800196b
 80018fc:	0800196b 	.word	0x0800196b
 8001900:	08001919 	.word	0x08001919
 8001904:	0800192d 	.word	0x0800192d
 8001908:	4a79      	ldr	r2, [pc, #484]	; (8001af0 <HAL_GPIO_Init+0x2b4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800190e:	e02c      	b.n	800196a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	623b      	str	r3, [r7, #32]
          break;
 8001916:	e029      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	3304      	adds	r3, #4
 800191e:	623b      	str	r3, [r7, #32]
          break;
 8001920:	e024      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	3308      	adds	r3, #8
 8001928:	623b      	str	r3, [r7, #32]
          break;
 800192a:	e01f      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	330c      	adds	r3, #12
 8001932:	623b      	str	r3, [r7, #32]
          break;
 8001934:	e01a      	b.n	800196c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800193e:	2304      	movs	r3, #4
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e013      	b.n	800196c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800194c:	2308      	movs	r3, #8
 800194e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	611a      	str	r2, [r3, #16]
          break;
 8001956:	e009      	b.n	800196c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001958:	2308      	movs	r3, #8
 800195a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	615a      	str	r2, [r3, #20]
          break;
 8001962:	e003      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
          break;
 8001968:	e000      	b.n	800196c <HAL_GPIO_Init+0x130>
          break;
 800196a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2bff      	cmp	r3, #255	; 0xff
 8001970:	d801      	bhi.n	8001976 <HAL_GPIO_Init+0x13a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	e001      	b.n	800197a <HAL_GPIO_Init+0x13e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3304      	adds	r3, #4
 800197a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2bff      	cmp	r3, #255	; 0xff
 8001980:	d802      	bhi.n	8001988 <HAL_GPIO_Init+0x14c>
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0x152>
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	3b08      	subs	r3, #8
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	210f      	movs	r1, #15
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	401a      	ands	r2, r3
 80019a0:	6a39      	ldr	r1, [r7, #32]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	431a      	orrs	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80b1 	beq.w	8001b1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019bc:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a4c      	ldr	r2, [pc, #304]	; (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d4:	4a48      	ldr	r2, [pc, #288]	; (8001af8 <HAL_GPIO_Init+0x2bc>)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a40      	ldr	r2, [pc, #256]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d013      	beq.n	8001a28 <HAL_GPIO_Init+0x1ec>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a3f      	ldr	r2, [pc, #252]	; (8001b00 <HAL_GPIO_Init+0x2c4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00d      	beq.n	8001a24 <HAL_GPIO_Init+0x1e8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3e      	ldr	r2, [pc, #248]	; (8001b04 <HAL_GPIO_Init+0x2c8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d007      	beq.n	8001a20 <HAL_GPIO_Init+0x1e4>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a3d      	ldr	r2, [pc, #244]	; (8001b08 <HAL_GPIO_Init+0x2cc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_GPIO_Init+0x1e0>
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e006      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	e004      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e002      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2c:	f002 0203 	and.w	r2, r2, #3
 8001a30:	0092      	lsls	r2, r2, #2
 8001a32:	4093      	lsls	r3, r2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a3a:	492f      	ldr	r1, [pc, #188]	; (8001af8 <HAL_GPIO_Init+0x2bc>)
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	492c      	ldr	r1, [pc, #176]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a62:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4928      	ldr	r1, [pc, #160]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	4922      	ldr	r1, [pc, #136]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	491e      	ldr	r1, [pc, #120]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	4918      	ldr	r1, [pc, #96]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4914      	ldr	r1, [pc, #80]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d021      	beq.n	8001b10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	490e      	ldr	r1, [pc, #56]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60cb      	str	r3, [r1, #12]
 8001ad8:	e021      	b.n	8001b1e <HAL_GPIO_Init+0x2e2>
 8001ada:	bf00      	nop
 8001adc:	10320000 	.word	0x10320000
 8001ae0:	10310000 	.word	0x10310000
 8001ae4:	10220000 	.word	0x10220000
 8001ae8:	10210000 	.word	0x10210000
 8001aec:	10120000 	.word	0x10120000
 8001af0:	10110000 	.word	0x10110000
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000
 8001afc:	40010800 	.word	0x40010800
 8001b00:	40010c00 	.word	0x40010c00
 8001b04:	40011000 	.word	0x40011000
 8001b08:	40011400 	.word	0x40011400
 8001b0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_GPIO_Init+0x304>)
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	4909      	ldr	r1, [pc, #36]	; (8001b40 <HAL_GPIO_Init+0x304>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	3301      	adds	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f47f ae8e 	bne.w	8001850 <HAL_GPIO_Init+0x14>
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	372c      	adds	r7, #44	; 0x2c
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e001      	b.n	8001b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	807b      	strh	r3, [r7, #2]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b82:	787b      	ldrb	r3, [r7, #1]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b88:	887a      	ldrh	r2, [r7, #2]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b8e:	e003      	b.n	8001b98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b90:	887b      	ldrh	r3, [r7, #2]
 8001b92:	041a      	lsls	r2, r3, #16
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	611a      	str	r2, [r3, #16]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
	...

08001ba4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fa50 	bl	8001068 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e272      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8087 	beq.w	8001d02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf4:	4b92      	ldr	r3, [pc, #584]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d00c      	beq.n	8001c1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c00:	4b8f      	ldr	r3, [pc, #572]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d112      	bne.n	8001c32 <HAL_RCC_OscConfig+0x5e>
 8001c0c:	4b8c      	ldr	r3, [pc, #560]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c18:	d10b      	bne.n	8001c32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1a:	4b89      	ldr	r3, [pc, #548]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d06c      	beq.n	8001d00 <HAL_RCC_OscConfig+0x12c>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d168      	bne.n	8001d00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e24c      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x76>
 8001c3c:	4b80      	ldr	r3, [pc, #512]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a7f      	ldr	r2, [pc, #508]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	e02e      	b.n	8001ca8 <HAL_RCC_OscConfig+0xd4>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x98>
 8001c52:	4b7b      	ldr	r3, [pc, #492]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a7a      	ldr	r2, [pc, #488]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	4b78      	ldr	r3, [pc, #480]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a77      	ldr	r2, [pc, #476]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e01d      	b.n	8001ca8 <HAL_RCC_OscConfig+0xd4>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0xbc>
 8001c76:	4b72      	ldr	r3, [pc, #456]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a71      	ldr	r2, [pc, #452]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b6f      	ldr	r3, [pc, #444]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a6e      	ldr	r2, [pc, #440]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e00b      	b.n	8001ca8 <HAL_RCC_OscConfig+0xd4>
 8001c90:	4b6b      	ldr	r3, [pc, #428]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a6a      	ldr	r2, [pc, #424]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b68      	ldr	r3, [pc, #416]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a67      	ldr	r2, [pc, #412]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d013      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fc88 	bl	80015c4 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff fc84 	bl	80015c4 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e200      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0xe4>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fc74 	bl	80015c4 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fc70 	bl	80015c4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e1ec      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x10c>
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d063      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d0e:	4b4c      	ldr	r3, [pc, #304]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d1a:	4b49      	ldr	r3, [pc, #292]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d11c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x18c>
 8001d26:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d116      	bne.n	8001d60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	4b43      	ldr	r3, [pc, #268]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x176>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e1c0      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4939      	ldr	r1, [pc, #228]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5e:	e03a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d68:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <HAL_RCC_OscConfig+0x270>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7ff fc29 	bl	80015c4 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d76:	f7ff fc25 	bl	80015c4 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e1a1      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4927      	ldr	r1, [pc, #156]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]
 8001da8:	e015      	b.n	8001dd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001daa:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <HAL_RCC_OscConfig+0x270>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff fc08 	bl	80015c4 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db8:	f7ff fc04 	bl	80015c4 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e180      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d03a      	beq.n	8001e58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d019      	beq.n	8001e1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df0:	f7ff fbe8 	bl	80015c4 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df8:	f7ff fbe4 	bl	80015c4 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e160      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f000 faa6 	bl	8002368 <RCC_Delay>
 8001e1c:	e01c      	b.n	8001e58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff fbce 	bl	80015c4 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2a:	e00f      	b.n	8001e4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fbca 	bl	80015c4 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d908      	bls.n	8001e4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e146      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	42420000 	.word	0x42420000
 8001e48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4c:	4b92      	ldr	r3, [pc, #584]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e9      	bne.n	8001e2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80a6 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6a:	4b8b      	ldr	r3, [pc, #556]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10d      	bne.n	8001e92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	4b88      	ldr	r3, [pc, #544]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4a87      	ldr	r2, [pc, #540]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	61d3      	str	r3, [r2, #28]
 8001e82:	4b85      	ldr	r3, [pc, #532]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	4b82      	ldr	r3, [pc, #520]	; (800209c <HAL_RCC_OscConfig+0x4c8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d118      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9e:	4b7f      	ldr	r3, [pc, #508]	; (800209c <HAL_RCC_OscConfig+0x4c8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a7e      	ldr	r2, [pc, #504]	; (800209c <HAL_RCC_OscConfig+0x4c8>)
 8001ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fb8b 	bl	80015c4 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb2:	f7ff fb87 	bl	80015c4 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b64      	cmp	r3, #100	; 0x64
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e103      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	4b75      	ldr	r3, [pc, #468]	; (800209c <HAL_RCC_OscConfig+0x4c8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x312>
 8001ed8:	4b6f      	ldr	r3, [pc, #444]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a6e      	ldr	r2, [pc, #440]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	e02d      	b.n	8001f42 <HAL_RCC_OscConfig+0x36e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x334>
 8001eee:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4a69      	ldr	r2, [pc, #420]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6213      	str	r3, [r2, #32]
 8001efa:	4b67      	ldr	r3, [pc, #412]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a66      	ldr	r2, [pc, #408]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6213      	str	r3, [r2, #32]
 8001f06:	e01c      	b.n	8001f42 <HAL_RCC_OscConfig+0x36e>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d10c      	bne.n	8001f2a <HAL_RCC_OscConfig+0x356>
 8001f10:	4b61      	ldr	r3, [pc, #388]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4a60      	ldr	r2, [pc, #384]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6213      	str	r3, [r2, #32]
 8001f1c:	4b5e      	ldr	r3, [pc, #376]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	4a5d      	ldr	r2, [pc, #372]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6213      	str	r3, [r2, #32]
 8001f28:	e00b      	b.n	8001f42 <HAL_RCC_OscConfig+0x36e>
 8001f2a:	4b5b      	ldr	r3, [pc, #364]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a5a      	ldr	r2, [pc, #360]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	4b58      	ldr	r3, [pc, #352]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a57      	ldr	r2, [pc, #348]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 0304 	bic.w	r3, r3, #4
 8001f40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d015      	beq.n	8001f76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fb3b 	bl	80015c4 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7ff fb37 	bl	80015c4 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0b1      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f68:	4b4b      	ldr	r3, [pc, #300]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ee      	beq.n	8001f52 <HAL_RCC_OscConfig+0x37e>
 8001f74:	e014      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f76:	f7ff fb25 	bl	80015c4 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f7ff fb21 	bl	80015c4 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e09b      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f94:	4b40      	ldr	r3, [pc, #256]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ee      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d105      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa6:	4b3c      	ldr	r3, [pc, #240]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	4a3b      	ldr	r2, [pc, #236]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8087 	beq.w	80020ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fbc:	4b36      	ldr	r3, [pc, #216]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d061      	beq.n	800208c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d146      	bne.n	800205e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd0:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <HAL_RCC_OscConfig+0x4cc>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff faf5 	bl	80015c4 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff faf1 	bl	80015c4 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e06d      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff0:	4b29      	ldr	r3, [pc, #164]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002004:	d108      	bne.n	8002018 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	4921      	ldr	r1, [pc, #132]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002018:	4b1f      	ldr	r3, [pc, #124]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a19      	ldr	r1, [r3, #32]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	430b      	orrs	r3, r1
 800202a:	491b      	ldr	r1, [pc, #108]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_RCC_OscConfig+0x4cc>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff fac5 	bl	80015c4 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203e:	f7ff fac1 	bl	80015c4 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e03d      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x46a>
 800205c:	e035      	b.n	80020ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_RCC_OscConfig+0x4cc>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff faae 	bl	80015c4 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206c:	f7ff faaa 	bl	80015c4 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e026      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x498>
 800208a:	e01e      	b.n	80020ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d107      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e019      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
 8002098:	40021000 	.word	0x40021000
 800209c:	40007000 	.word	0x40007000
 80020a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_RCC_OscConfig+0x500>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d106      	bne.n	80020c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000

080020d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0d0      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020ec:	4b6a      	ldr	r3, [pc, #424]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d910      	bls.n	800211c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b67      	ldr	r3, [pc, #412]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 0207 	bic.w	r2, r3, #7
 8002102:	4965      	ldr	r1, [pc, #404]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b63      	ldr	r3, [pc, #396]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0b8      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002134:	4b59      	ldr	r3, [pc, #356]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4a58      	ldr	r2, [pc, #352]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800213e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800214c:	4b53      	ldr	r3, [pc, #332]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a52      	ldr	r2, [pc, #328]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002156:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002158:	4b50      	ldr	r3, [pc, #320]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	494d      	ldr	r1, [pc, #308]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d040      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b47      	ldr	r3, [pc, #284]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d115      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e07f      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002196:	4b41      	ldr	r3, [pc, #260]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d109      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e073      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a6:	4b3d      	ldr	r3, [pc, #244]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e06b      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b6:	4b39      	ldr	r3, [pc, #228]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f023 0203 	bic.w	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4936      	ldr	r1, [pc, #216]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c8:	f7ff f9fc 	bl	80015c4 <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d0:	f7ff f9f8 	bl	80015c4 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e053      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	4b2d      	ldr	r3, [pc, #180]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 020c 	and.w	r2, r3, #12
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d1eb      	bne.n	80021d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d210      	bcs.n	8002228 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 0207 	bic.w	r2, r3, #7
 800220e:	4922      	ldr	r1, [pc, #136]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b20      	ldr	r3, [pc, #128]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e032      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4916      	ldr	r1, [pc, #88]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	490e      	ldr	r1, [pc, #56]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002266:	f000 f821 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 800226a:	4602      	mov	r2, r0
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	490a      	ldr	r1, [pc, #40]	; (80022a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002278:	5ccb      	ldrb	r3, [r1, r3]
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f95a 	bl	8001540 <HAL_InitTick>

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40022000 	.word	0x40022000
 800229c:	40021000 	.word	0x40021000
 80022a0:	08002dc0 	.word	0x08002dc0
 80022a4:	20000010 	.word	0x20000010
 80022a8:	20000014 	.word	0x20000014

080022ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ac:	b490      	push	{r4, r7}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022b2:	4b29      	ldr	r3, [pc, #164]	; (8002358 <HAL_RCC_GetSysClockFreq+0xac>)
 80022b4:	1d3c      	adds	r4, r7, #4
 80022b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022bc:	f240 2301 	movw	r3, #513	; 0x201
 80022c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022d6:	4b21      	ldr	r3, [pc, #132]	; (800235c <HAL_RCC_GetSysClockFreq+0xb0>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d002      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x40>
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d003      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x46>
 80022ea:	e02b      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ec:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ee:	623b      	str	r3, [r7, #32]
      break;
 80022f0:	e02b      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	0c9b      	lsrs	r3, r3, #18
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	3328      	adds	r3, #40	; 0x28
 80022fc:	443b      	add	r3, r7
 80022fe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002302:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d012      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800230e:	4b13      	ldr	r3, [pc, #76]	; (800235c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	0c5b      	lsrs	r3, r3, #17
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	3328      	adds	r3, #40	; 0x28
 800231a:	443b      	add	r3, r7
 800231c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002320:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	4a0e      	ldr	r2, [pc, #56]	; (8002360 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002326:	fb03 f202 	mul.w	r2, r3, r2
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
 8002332:	e004      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	4a0b      	ldr	r2, [pc, #44]	; (8002364 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002338:	fb02 f303 	mul.w	r3, r2, r3
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	623b      	str	r3, [r7, #32]
      break;
 8002342:	e002      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002346:	623b      	str	r3, [r7, #32]
      break;
 8002348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800234a:	6a3b      	ldr	r3, [r7, #32]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3728      	adds	r7, #40	; 0x28
 8002350:	46bd      	mov	sp, r7
 8002352:	bc90      	pop	{r4, r7}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	08002db0 	.word	0x08002db0
 800235c:	40021000 	.word	0x40021000
 8002360:	007a1200 	.word	0x007a1200
 8002364:	003d0900 	.word	0x003d0900

08002368 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <RCC_Delay+0x34>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <RCC_Delay+0x38>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	0a5b      	lsrs	r3, r3, #9
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002384:	bf00      	nop
  }
  while (Delay --);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1e5a      	subs	r2, r3, #1
 800238a:	60fa      	str	r2, [r7, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f9      	bne.n	8002384 <RCC_Delay+0x1c>
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	20000010 	.word	0x20000010
 80023a0:	10624dd3 	.word	0x10624dd3

080023a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e076      	b.n	80024a4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d108      	bne.n	80023d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023c6:	d009      	beq.n	80023dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
 80023ce:	e005      	b.n	80023dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe ffb0 	bl	800135c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002412:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002460:	ea42 0103 	orr.w	r1, r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	0c1a      	lsrs	r2, r3, #16
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f002 0204 	and.w	r2, r2, #4
 8002482:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002492:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	603b      	str	r3, [r7, #0]
 80024b8:	4613      	mov	r3, r2
 80024ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_SPI_Transmit+0x22>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e126      	b.n	800271c <HAL_SPI_Transmit+0x270>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024d6:	f7ff f875 	bl	80015c4 <HAL_GetTick>
 80024da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d002      	beq.n	80024f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
 80024ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024f0:	e10b      	b.n	800270a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <HAL_SPI_Transmit+0x52>
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002502:	e102      	b.n	800270a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2203      	movs	r2, #3
 8002508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	88fa      	ldrh	r2, [r7, #6]
 800251c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	88fa      	ldrh	r2, [r7, #6]
 8002522:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254a:	d10f      	bne.n	800256c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800255a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800256a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002576:	2b40      	cmp	r3, #64	; 0x40
 8002578:	d007      	beq.n	800258a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002588:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002592:	d14b      	bne.n	800262c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <HAL_SPI_Transmit+0xf6>
 800259c:	8afb      	ldrh	r3, [r7, #22]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d13e      	bne.n	8002620 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	881a      	ldrh	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	1c9a      	adds	r2, r3, #2
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025c6:	e02b      	b.n	8002620 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d112      	bne.n	80025fc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	881a      	ldrh	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	1c9a      	adds	r2, r3, #2
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80025fa:	e011      	b.n	8002620 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025fc:	f7fe ffe2 	bl	80015c4 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d803      	bhi.n	8002614 <HAL_SPI_Transmit+0x168>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002612:	d102      	bne.n	800261a <HAL_SPI_Transmit+0x16e>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800261e:	e074      	b.n	800270a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1ce      	bne.n	80025c8 <HAL_SPI_Transmit+0x11c>
 800262a:	e04c      	b.n	80026c6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_SPI_Transmit+0x18e>
 8002634:	8afb      	ldrh	r3, [r7, #22]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d140      	bne.n	80026bc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	330c      	adds	r3, #12
 8002644:	7812      	ldrb	r2, [r2, #0]
 8002646:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002660:	e02c      	b.n	80026bc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b02      	cmp	r3, #2
 800266e:	d113      	bne.n	8002698 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	330c      	adds	r3, #12
 800267a:	7812      	ldrb	r2, [r2, #0]
 800267c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800268c:	b29b      	uxth	r3, r3
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	86da      	strh	r2, [r3, #54]	; 0x36
 8002696:	e011      	b.n	80026bc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002698:	f7fe ff94 	bl	80015c4 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d803      	bhi.n	80026b0 <HAL_SPI_Transmit+0x204>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ae:	d102      	bne.n	80026b6 <HAL_SPI_Transmit+0x20a>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d102      	bne.n	80026bc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026ba:	e026      	b.n	800270a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1cd      	bne.n	8002662 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	6839      	ldr	r1, [r7, #0]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fa54 	bl	8002b78 <SPI_EndRxTxTransaction>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2220      	movs	r2, #32
 80026da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10a      	bne.n	80026fa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	77fb      	strb	r3, [r7, #31]
 8002706:	e000      	b.n	800270a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002708:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800271a:	7ffb      	ldrb	r3, [r7, #31]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08c      	sub	sp, #48	; 0x30
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002732:	2301      	movs	r3, #1
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_SPI_TransmitReceive+0x26>
 8002746:	2302      	movs	r3, #2
 8002748:	e18a      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x33c>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002752:	f7fe ff37 	bl	80015c4 <HAL_GetTick>
 8002756:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800275e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002768:	887b      	ldrh	r3, [r7, #2]
 800276a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800276c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002770:	2b01      	cmp	r3, #1
 8002772:	d00f      	beq.n	8002794 <HAL_SPI_TransmitReceive+0x70>
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800277a:	d107      	bne.n	800278c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d103      	bne.n	800278c <HAL_SPI_TransmitReceive+0x68>
 8002784:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002788:	2b04      	cmp	r3, #4
 800278a:	d003      	beq.n	8002794 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800278c:	2302      	movs	r3, #2
 800278e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002792:	e15b      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d005      	beq.n	80027a6 <HAL_SPI_TransmitReceive+0x82>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_SPI_TransmitReceive+0x82>
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027ac:	e14e      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d003      	beq.n	80027c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2205      	movs	r2, #5
 80027be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	887a      	ldrh	r2, [r7, #2]
 80027d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	887a      	ldrh	r2, [r7, #2]
 80027ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d007      	beq.n	8002816 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002814:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800281e:	d178      	bne.n	8002912 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <HAL_SPI_TransmitReceive+0x10a>
 8002828:	8b7b      	ldrh	r3, [r7, #26]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d166      	bne.n	80028fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	881a      	ldrh	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	1c9a      	adds	r2, r3, #2
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002852:	e053      	b.n	80028fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b02      	cmp	r3, #2
 8002860:	d11b      	bne.n	800289a <HAL_SPI_TransmitReceive+0x176>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d016      	beq.n	800289a <HAL_SPI_TransmitReceive+0x176>
 800286c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286e:	2b01      	cmp	r3, #1
 8002870:	d113      	bne.n	800289a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	881a      	ldrh	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	1c9a      	adds	r2, r3, #2
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d119      	bne.n	80028dc <HAL_SPI_TransmitReceive+0x1b8>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d014      	beq.n	80028dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	b292      	uxth	r2, r2
 80028be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	1c9a      	adds	r2, r3, #2
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028d8:	2301      	movs	r3, #1
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028dc:	f7fe fe72 	bl	80015c4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d807      	bhi.n	80028fc <HAL_SPI_TransmitReceive+0x1d8>
 80028ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d003      	beq.n	80028fc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028fa:	e0a7      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002900:	b29b      	uxth	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1a6      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x130>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1a1      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x130>
 8002910:	e07c      	b.n	8002a0c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_SPI_TransmitReceive+0x1fc>
 800291a:	8b7b      	ldrh	r3, [r7, #26]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d16b      	bne.n	80029f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	330c      	adds	r3, #12
 800292a:	7812      	ldrb	r2, [r2, #0]
 800292c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002946:	e057      	b.n	80029f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d11c      	bne.n	8002990 <HAL_SPI_TransmitReceive+0x26c>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d017      	beq.n	8002990 <HAL_SPI_TransmitReceive+0x26c>
 8002960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002962:	2b01      	cmp	r3, #1
 8002964:	d114      	bne.n	8002990 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	7812      	ldrb	r2, [r2, #0]
 8002972:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b01      	cmp	r3, #1
 800299c:	d119      	bne.n	80029d2 <HAL_SPI_TransmitReceive+0x2ae>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d014      	beq.n	80029d2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029ce:	2301      	movs	r3, #1
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029d2:	f7fe fdf7 	bl	80015c4 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029de:	429a      	cmp	r2, r3
 80029e0:	d803      	bhi.n	80029ea <HAL_SPI_TransmitReceive+0x2c6>
 80029e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d102      	bne.n	80029f0 <HAL_SPI_TransmitReceive+0x2cc>
 80029ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d103      	bne.n	80029f8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029f6:	e029      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1a2      	bne.n	8002948 <HAL_SPI_TransmitReceive+0x224>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d19d      	bne.n	8002948 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f8b1 	bl	8002b78 <SPI_EndRxTxTransaction>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d006      	beq.n	8002a2a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a28:	e010      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10b      	bne.n	8002a4a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	e000      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002a4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3730      	adds	r7, #48	; 0x30
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a78:	f7fe fda4 	bl	80015c4 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	4413      	add	r3, r2
 8002a86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a88:	f7fe fd9c 	bl	80015c4 <HAL_GetTick>
 8002a8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a8e:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	015b      	lsls	r3, r3, #5
 8002a94:	0d1b      	lsrs	r3, r3, #20
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a9e:	e054      	b.n	8002b4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa6:	d050      	beq.n	8002b4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002aa8:	f7fe fd8c 	bl	80015c4 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d902      	bls.n	8002abe <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d13d      	bne.n	8002b3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002acc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ad6:	d111      	bne.n	8002afc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ae0:	d004      	beq.n	8002aec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aea:	d107      	bne.n	8002afc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002afa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b04:	d10f      	bne.n	8002b26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e017      	b.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4013      	ands	r3, r2
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	bf0c      	ite	eq
 8002b5a:	2301      	moveq	r3, #1
 8002b5c:	2300      	movne	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d19b      	bne.n	8002aa0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3720      	adds	r7, #32
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000010 	.word	0x20000010

08002b78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f7ff ff6a 	bl	8002a68 <SPI_WaitFlagStateUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9e:	f043 0220 	orr.w	r2, r3, #32
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e000      	b.n	8002bac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002bb8:	4904      	ldr	r1, [pc, #16]	; (8002bcc <MX_FATFS_Init+0x18>)
 8002bba:	4805      	ldr	r0, [pc, #20]	; (8002bd0 <MX_FATFS_Init+0x1c>)
 8002bbc:	f000 f8b0 	bl	8002d20 <FATFS_LinkDriver>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <MX_FATFS_Init+0x20>)
 8002bc6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200000b4 	.word	0x200000b4
 8002bd0:	2000001c 	.word	0x2000001c
 8002bd4:	200000b0 	.word	0x200000b0

08002bd8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//		Stat = STA_NOINIT;
//		return Stat;
	return SD_disk_initialize(pdrv);
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fd fe1d 	bl	8000824 <SD_disk_initialize>
 8002bea:	4603      	mov	r3, r0
 8002bec:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fef4 	bl	80009f0 <SD_disk_status>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4603      	mov	r3, r0
 8002c22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8002c24:	7bf8      	ldrb	r0, [r7, #15]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	f7fd fef4 	bl	8000a18 <SD_disk_read>
 8002c30:	4603      	mov	r3, r0
 8002c32:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	4603      	mov	r3, r0
 8002c4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8002c4c:	7bf8      	ldrb	r0, [r7, #15]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	68b9      	ldr	r1, [r7, #8]
 8002c54:	f7fd ff4a 	bl	8000aec <SD_disk_write>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	b2db      	uxtb	r3, r3

  /* USER CODE END WRITE */
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	603a      	str	r2, [r7, #0]
 8002c6e:	71fb      	strb	r3, [r7, #7]
 8002c70:	460b      	mov	r3, r1
 8002c72:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	79b9      	ldrb	r1, [r7, #6]
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd ffba 	bl	8000bf4 <SD_disk_ioctl>
 8002c80:	4603      	mov	r3, r0
 8002c82:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	4613      	mov	r3, r2
 8002c98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8002ca2:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <FATFS_LinkDriverEx+0x90>)
 8002ca4:	7a5b      	ldrb	r3, [r3, #9]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d831      	bhi.n	8002d10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <FATFS_LinkDriverEx+0x90>)
 8002cae:	7a5b      	ldrb	r3, [r3, #9]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <FATFS_LinkDriverEx+0x90>)
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8002cba:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <FATFS_LinkDriverEx+0x90>)
 8002cbc:	7a5b      	ldrb	r3, [r3, #9]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	4a16      	ldr	r2, [pc, #88]	; (8002d1c <FATFS_LinkDriverEx+0x90>)
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <FATFS_LinkDriverEx+0x90>)
 8002ccc:	7a5b      	ldrb	r3, [r3, #9]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <FATFS_LinkDriverEx+0x90>)
 8002cd4:	4413      	add	r3, r2
 8002cd6:	79fa      	ldrb	r2, [r7, #7]
 8002cd8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8002cda:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <FATFS_LinkDriverEx+0x90>)
 8002cdc:	7a5b      	ldrb	r3, [r3, #9]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	b2d1      	uxtb	r1, r2
 8002ce4:	4a0d      	ldr	r2, [pc, #52]	; (8002d1c <FATFS_LinkDriverEx+0x90>)
 8002ce6:	7251      	strb	r1, [r2, #9]
 8002ce8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8002cea:	7dbb      	ldrb	r3, [r7, #22]
 8002cec:	3330      	adds	r3, #48	; 0x30
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	223a      	movs	r2, #58	; 0x3a
 8002cfa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	3302      	adds	r3, #2
 8002d00:	222f      	movs	r2, #47	; 0x2f
 8002d02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	3303      	adds	r3, #3
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	200000b8 	.word	0x200000b8

08002d20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	6839      	ldr	r1, [r7, #0]
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff ffac 	bl	8002c8c <FATFS_LinkDriverEx>
 8002d34:	4603      	mov	r3, r0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <__libc_init_array>:
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	2600      	movs	r6, #0
 8002d44:	4d0c      	ldr	r5, [pc, #48]	; (8002d78 <__libc_init_array+0x38>)
 8002d46:	4c0d      	ldr	r4, [pc, #52]	; (8002d7c <__libc_init_array+0x3c>)
 8002d48:	1b64      	subs	r4, r4, r5
 8002d4a:	10a4      	asrs	r4, r4, #2
 8002d4c:	42a6      	cmp	r6, r4
 8002d4e:	d109      	bne.n	8002d64 <__libc_init_array+0x24>
 8002d50:	f000 f822 	bl	8002d98 <_init>
 8002d54:	2600      	movs	r6, #0
 8002d56:	4d0a      	ldr	r5, [pc, #40]	; (8002d80 <__libc_init_array+0x40>)
 8002d58:	4c0a      	ldr	r4, [pc, #40]	; (8002d84 <__libc_init_array+0x44>)
 8002d5a:	1b64      	subs	r4, r4, r5
 8002d5c:	10a4      	asrs	r4, r4, #2
 8002d5e:	42a6      	cmp	r6, r4
 8002d60:	d105      	bne.n	8002d6e <__libc_init_array+0x2e>
 8002d62:	bd70      	pop	{r4, r5, r6, pc}
 8002d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d68:	4798      	blx	r3
 8002d6a:	3601      	adds	r6, #1
 8002d6c:	e7ee      	b.n	8002d4c <__libc_init_array+0xc>
 8002d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d72:	4798      	blx	r3
 8002d74:	3601      	adds	r6, #1
 8002d76:	e7f2      	b.n	8002d5e <__libc_init_array+0x1e>
 8002d78:	08002dd0 	.word	0x08002dd0
 8002d7c:	08002dd0 	.word	0x08002dd0
 8002d80:	08002dd0 	.word	0x08002dd0
 8002d84:	08002dd4 	.word	0x08002dd4

08002d88 <memset>:
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4402      	add	r2, r0
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d100      	bne.n	8002d92 <memset+0xa>
 8002d90:	4770      	bx	lr
 8002d92:	f803 1b01 	strb.w	r1, [r3], #1
 8002d96:	e7f9      	b.n	8002d8c <memset+0x4>

08002d98 <_init>:
 8002d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9a:	bf00      	nop
 8002d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d9e:	bc08      	pop	{r3}
 8002da0:	469e      	mov	lr, r3
 8002da2:	4770      	bx	lr

08002da4 <_fini>:
 8002da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da6:	bf00      	nop
 8002da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002daa:	bc08      	pop	{r3}
 8002dac:	469e      	mov	lr, r3
 8002dae:	4770      	bx	lr
